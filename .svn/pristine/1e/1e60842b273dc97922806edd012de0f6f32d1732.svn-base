import React ,{Component , Fragment } from 'react';
import BreadcrumbCustom from '../../BreadcrumbCustom';
import {Row,Col,Table,notification,Button,Input,Tabs} from 'antd';
import httpServer from '../../../axios';
import PersonInfo from './personInfo';
import HealthCarePlan from './healthCarePlan';
import CaseCare from './caseCare';
import './index.css';

const TabPane = Tabs.TabPane;
class CarePlan extends Component{
  constructor(props){
    super(props);
    this.state = {
      customerId:'',
      oldManList:[],//老人列表数据
      oldManList_copy:[],//老人列表数据拷贝
      searchText:'',//按老人姓名搜索
      elderlyListFlag:true,
      id:'',
      elderlyName:'',
      elderlyId:'',
      personInfo:{},//老人信息集合
      tabFlag:true,//tab2，3，4标志
      nursingScheduledId:'',
      nursingScheduledList:[],//老人对应的护理计划列表
    }
    this.handleInputChange = this.handleInputChange.bind(this);//搜索框数据发生变化
    this.handleSearchElderly = this.handleSearchElderly.bind(this);//搜索老人信息
    this.handleClickReset = this.handleClickReset.bind(this);//清楚搜索条件
    this.handleAddCarePlan = this.handleAddCarePlan.bind(this);//跳转到护理计划填写界面
    this.elderlyListFlagToTrue = this.elderlyListFlagToTrue.bind(this);//跳转会老人列表界面
    this.tabFlagChange = this.tabFlagChange.bind(this);//激活Tab2，3，4
    this.getNursingScheduledId  = this.getNursingScheduledId.bind(this);//获取nursingScheduledId
  }

  componentDidMount(){
    //获取入院老人信息列表
    this.getListElderlyInfo();
  }
  //获取入院老人信息列表
  getListElderlyInfo(){
    const {customerId} = this.props.auth;
    this.setState({customerId});
    httpServer.listElderlyInfo({listStatus:"3",customerId}).then((res) => {
      if (res.code === 200) {
        res.data?this.setState({oldManList:res.data,oldManList_copy:res.data}):this.setState({oldManList:[],oldManList_copy:[]});
      } else {
        if(res.message ==='Request failed with status code 500'){
            console.log(res.message);
         }else{
             const args = {
            message: '通信失败',
            description: res.msg,
            duration: 2,
          };
          notification.error(args);
         }
      }
    }).catch((error) => {
      console.log(error);
    });
  }

  //获取老人对应的护理计划列表
  getListNursingScheduled(){
    httpServer.listNursingScheduled({elderlyId:this.state.elderlyId}).then((res)=>{
      if (res.code === 200) {
         res.data ? this.setState({ nursingScheduledList: res.data }) : this.setState({ nursingScheduledList: [] });
      } else {
        const args = {
          message: '通信失败',
          description: res.msg,
          duration: 2,
        };
        notification.error(args);
      }
    }).catch((err)=>{
      console.log(err);
    });
  }
  //搜索老人信息相关操作
  handleInputChange(e){ //搜索框数据发生变化
    this.setState({searchText:e.target.value});
  }
  handleSearchElderly(){//搜索老人信息
    const { searchText } = this.state;
    if(searchText){
      const reg = new RegExp(searchText, 'gi');
      this.setState({
        oldManList_copy: this.state.oldManList.map((record) => {
          const match = record.name && record.name.match(reg);
          if (!match) {
            return null;
          }
          return record;
        }).filter(record => !!record),
      });
    }else{
      const args = {
        message: '友情提示',
        description: "请先输入老人姓名",
        duration: 2,
      };
      notification.info(args);
    }
  }
  handleClickReset(){//清楚搜索条件
    this.setState({
      oldManList_copy:this.state.oldManList,
      searchText:'',
    });
  }

  //护理计划相关操作
  hangdleCheck(record){ //单击选中老人信息
    this.setState({id:record.id,elderlyName:record.name,personInfo:record,elderlyId:record.id},()=>{
      this.getListNursingScheduled();
    });
  }
  handleAddCarePlan(){ //新增当前选中老人的护理计划
    const {id} = this.state;
    if(id){
      this.setState({elderlyListFlag:false});
    }else{
      const args = {
        message: '友情提示',
        description: "请先从列表中单击选中老人姓名",
        duration: 2,
      };
      notification.info(args);
    }
  }
  elderlyListFlagToTrue(){//返回到老人信息列表
    this.setState({elderlyListFlag:true,tabFlag:true});
  }
  tabFlagChange(){//激活tab2，3，4
    this.setState({tabFlag:false});
  }
  getNursingScheduledId(param){ //获取nursingScheduledId
     this.setState({nursingScheduledId:param});
  }

  handleClickRead(record){//查看护理计划详情
    const {id , nursingScheduledId , elderlyId } = record;
    httpServer.getNursingScheduledDetail({id,nursingScheduledId,elderlyId}).then((res)=>{
      console.log(res);
    }).catch((error)=>{
      console.log(error);
    });
  }

  render(){
    const {
      oldManList_copy,
      searchText,
      elderlyListFlag,
      personInfo,
      customerId,
      tabFlag,
      nursingScheduledId,
      elderlyId,
      nursingScheduledList,
    } = this.state;
    const columns = [{
      title: '序号',
      render:(text,record,index)=>`${index+1}`,
      key:'serialNumber',
      width:'10%'
    },{
      title:'入院编号',
      dataIndex: 'elderlyNo',
      key: 'elderlyNo',
      width:'10%'
    },{
      title: '老人姓名',
      dataIndex: 'name',
      key: 'name',
      width:'10%'
    },{
      title:'身份证号',
      dataIndex: 'idNumber',
      key: 'idNumber',
      width:'20%'
    },{
      title: '房间号',
      dataIndex: 'roomCode',
      key: 'roomCode',
      width:'15%'
    },{
      title:'评估等级',
      dataIndex: 'estimateGradeCode',
      key: 'estimateGradeCode',
      width:'15%'
    },{
      title: '护理等级',
      dataIndex: 'nursingGradeCode',
      key: 'nursingGradeCode',
    }];
    const nursingScheduledColumns = [{
      title: '序号',
      render:(text,record,index)=>`${index+1}`,
      key:'serialNumber1',
      width:'25%'
    },{
      title:'计划生成时间',
      dataIndex: 'addtime',
      key: 'addtime',
      width:'50%'
    },{
      title: '操作',
      dataIndex: 'action',
      key: 'action',
      render:(text,record)=>{
        return <Button type="primary" onClick={()=>this.handleClickRead(record)}>查看详情</Button>
      }
    }];
    return(
      <Fragment>
        <BreadcrumbCustom first="老人管理" second="护理计划" />
        {
          elderlyListFlag?
            <Row>
              <Row gutter={16} style={{marginBottom:20}}>
                <Col md={4}>
                  <Input 
                    placeholder="按老人姓名搜索"  
                    value={this.state.searchText}
                    onChange={this.handleInputChange}
                    onPressEnter={this.handleSearchElderly}
                  />
                </Col>
                <Col md={4}>
                  <Button onClick={this.handleSearchElderly}>搜索</Button>
                  <Button onClick={this.handleClickReset}>Reset</Button>
                </Col>
                <Col md={8}>
                  当前选中的老人姓名：
                  <Input 
                    placeholder="请先单击选择老人"  
                    value={this.state.elderlyName}
                    disabled
                    style={{width:"40%"}}
                  />
                </Col>
                <Col md={4}>
                  <Button onClick={this.handleAddCarePlan}>新增护理计划</Button>
                </Col>
              </Row>
              <Row gutter={16}>
                <Col md={18}>
                  <Table 
                    bordered
                    dataSource={oldManList_copy} 
                    columns={columns} 
                    pagination={{ showSizeChanger:true , showQuickJumper:true , pageSizeOptions:['10','20','30','40','50','100']}}
                    rowKey={record => record.id}
                    onRow={(record) => {
                        return {
                          onClick: () => {this.hangdleCheck(record);},       // 点击行
                      };
                    }}
                  />
                </Col>
                <Col md={6}>
                  <Table 
                    bordered
                    dataSource={nursingScheduledList} 
                    columns={nursingScheduledColumns} 
                    pagination={{ showSizeChanger:true , showQuickJumper:true , pageSizeOptions:['10','20','30','40','50','100']}}
                    rowKey={record => record.id}
                  />
                </Col>
              </Row>
            </Row>:
            <Row>
              <div className="card-container">
                <Tabs type="card" tabBarExtraContent={<Button onClick={this.elderlyListFlagToTrue} type="primary">返回</Button>}>
                  <TabPane tab="人员信息" key="1">
                    <PersonInfo 
                      personInfo={personInfo}
                      customerId={customerId}
                      tabFlagChange = {this.tabFlagChange}
                      getNursingScheduledId = {this.getNursingScheduledId}
                      elderlyId = {elderlyId}
                      getListNursingScheduled = {()=>this.getListNursingScheduled()}
                    />
                  </TabPane>
                  <TabPane tab="日常生活能力评估" key="2" disabled={tabFlag}>
                    <p>Content of Tab Pane 2</p>
                    <p>Content of Tab Pane 2</p>
                    <p>Content of Tab Pane 2</p>
                  </TabPane>
                  <TabPane tab="健康护理计划" key="3" >
                    <HealthCarePlan 
                      nursingScheduledId = {nursingScheduledId}
                      customerId={customerId}
                      elderlyId = {elderlyId}
                    />
                  </TabPane>
                  <TabPane tab="个案护理工作计划" key="4" >
                    <CaseCare nursingScheduledId = {nursingScheduledId}/>
                  </TabPane>
                </Tabs>
              </div>
            </Row>
        }   
      </Fragment>
    )
  }
}

export default CarePlan;