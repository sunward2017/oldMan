import React,{Component} from 'react';
import BreadcrumbCustom from '../../BreadcrumbCustom';
import {Tag,Table,Divider,Popconfirm,notification,Button,Card} from 'antd';
import httpServer from '../../../axios';
import EvaluateInfo from './evaluateInfo';

class OldManEvaluate extends Component{
  constructor(props){
    super(props);
    this.state = {
      dataSource:[],
      customerId:'',
      tabKey:'tab1',
      data:[],
      elderlys:{},
      flag:1,
      evaluateByElderly:{},
    }
    this.handleAdd = this.handleAdd.bind(this);
  }

  componentDidMount(){
    this.listByElderly();
  }

  onTabChange = (tabKey, type) => {
    this.setState({ tabKey});
  }

  //getEvaluateList获取老人评估列表、评估项
  getEvaluateList(){
    const {customerId} = this.props.auth;
    this.setState({customerId});
    httpServer.listOldManEvaluate({customerId}).then((res)=>{
       if (res.code === 200) {
       	  if(res.data){
       	  	const elderlyIds={};
       	  	var data=res.data,l=data.length,newData=[];
       	  	for(var i=0;i<l;i++){
       	  		 if(!elderlyIds[data[i].elderlyId]){
       	  		 	 elderlyIds[data[i].elderlyId] = true;
                 newData.push(data[i]);
       	  		 }else{
       	  		  const index = newData.findIndex(item=>(item.elderlyId===data[i].elderlyId));
       	  		  newData[index].children=[];
       	  		  newData[index].children.push(data[i]);
       	  		 }
       	  	}
       	  	this.setState({dataSource:newData});
       	  }else{
       	  	this.setState({dataSource:[]})
       	  }
           
        } else {
          if(res.message ==='Request failed with status code 500'){
              console.log(res.message);
          }else{
            const args = {
              message: '获取老人评估列表失败',
              description: res.msg,
              duration: 2,
            };
            notification.error(args);
          }
        }
    }).catch((err)=>{
      console.log(err);
    });
  }
  
  listByElderly=()=>{
  	 const {customerId} = this.props.auth;
  	 httpServer.listElderlyInfo({listStatus:"1,2",customerId}).then((res) => {
		      if (res.code === 200) {
		         if(res.data){
		         	 let obj = {};
		         	 res.data.map(item=>{
		         	 	 obj[item.id]= item;
		         	 })
		         	 this.setState({elderlys:obj},function(){
		         	 	  this.getEvaluateList();
		         	 })
		         }
		      } else {
		        if(res.message ==='Request failed with status code 500'){
		            console.log(res.message);
		         }else{
		             const args = {
		            message: '通信失败',
		            description: res.msg,
		            duration: 2,
		          };
		          notification.error(args);
		         }
		      }
	    }).catch((error) => {
	      console.log(error);
	    });
  }
  //
  handleAdd(){
    this.setState({ tabKey:'tab2',evaluateByElderly:{}});
  }
  reback=()=>{
  	this.listByElderly();
  	this.setState({ tabKey:'tab1'});
  }
  //查看护工信息
  handleRead(record){
  	const {elderlys} = this.state;
    httpServer.getEvaluateDetail({id:record.id}).then(res=>{
     	  if(res.code===200){
     	  	 if(res.data){
     	  	  const details = {};
     	  	  res.data.tbElderlyEstimateItem.forEach(item=>{
     	  	  	 details[item.estimateId]=item.tbElderlyEstimateItemDetail.map(i=>(i.itemId.toString()));
     	  	  })
     	  	 	const evaluateByElderly = {...res.data,elderly:elderlys[res.data.elderlyId],details};  
     	  	 	this.setState({flag:1,evaluateByElderly,tabKey:'tab2'})
     	  	 };
     	  	 
     	  }
    })
  }

  
  render(){
    const {dataSource,customerId,data,evaluateByElderly} = this.state;
    const tabList = [{
      key: 'tab1',
      tab: 'tab1',
    }, {
      key: 'tab2',
      tab: 'tab2',
    }];
    const columns = [{
      title:'评估日期',
      dataIndex: 'estimate',
      key: 'addtime',
      width:'15%',
      render:(text,record,index)=>{
      	return text&&text.split(' ')[0]
      }
    },{
      title: '评估老人',
      dataIndex: 'elderlyId',
      key: 'elderlyId',
     render:(t,r,i)=>{
     	 return this.state.elderlys[t].name
     }
    },{
      title: '评估等级',
      dataIndex: 'estimateGradeName',
      key: 'estimateGradeName',
      width:'15%'
    },{
    	title: '评估分数',
      dataIndex: 'curScore',
      key: 'curScore',
      width:'10%'
    },{
      title:'操作',
      dataIndex:'action',
      key:'action',
      width:'10%',
      render:(text,record)=>{
        return( 
            <a href="javascript:;" onClick={() => { this.handleRead(record) }} style={{color:'#2ebc2e'}}>修改</a>
        )
      },
    }];
    const contentList = {
      tab1: <Table 
          bordered
          dataSource={dataSource} 
          indentSize={20}
          columns={columns} 
          pagination={{ showSizeChanger:true , showQuickJumper:true , pageSizeOptions:['10','20','30','40','50','100']}}
          rowKey={record => record.id}
        />,
      tab2: <EvaluateInfo customerId={customerId} evaluateByElderly={evaluateByElderly} reback={this.reback}/>,
    };
    return(
      <div>
        <BreadcrumbCustom first="老人管理" second="入院评估" />
        <Card 
          title="入院评估" 
          bordered={false} 
          style={{ width: '100%' }}
          extra={<Button type="primary" onClick={this.handleAdd} >新增</Button>}
          activeTabKey={this.state.tabKey}
        >
          {contentList[this.state.tabKey]}
        </Card>
       
      </div>
    )
  }
}

export default OldManEvaluate;
