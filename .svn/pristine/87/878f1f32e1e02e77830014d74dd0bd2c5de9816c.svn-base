import React,{Component} from 'react';
import {Modal, Form, Input, Radio, notification, Button,InputNumber} from 'antd';
import httpServer from '../../../axios';

const RadioGroup = Radio.Group;
class ModalInfo extends Component{
  constructor(props){
    super(props);
    console.log(props.record);
    this.state = {
      dataList:props.record,
    }
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleIptText(target,e) {
    let dataList = Object.assign({},this.state.dataList);
    dataList[target] = e.target ? e.target.value : e;
    this.setState({dataList});
  }

  handleSubmit(){
    const {action} = this.props;
    const _this = this;
    const {customerId} = this.props;
    const {money ,state,nursingGradeName,days} = _this.state.dataList;
    const reg =/^[0-9]+.?[0-9]*$/;
    const reg1=/^([1-9]\d*|[0]{1,1})$/
    if(action!=='read'){
      if( !(money &&  nursingGradeName)) {
        notification.warning({
          message: '提示：',
          description: '单据存在数据未填的情况，请仔细核对！',
        });
        return false
      }
      if(!reg.test(money)){
          notification.warning({
          message: '提示：',
          description: '费用只能是小数或整数，且不能有空格',
        });
        return false
      }
      if(!reg1.test(days)){
          notification.warning({
          message: '提示：',
          description: '天数只能是正整数',
        });
        return false
      }
      const data = _this.state.dataList;
      data.customerId = customerId;
      if(state !==0){
        data.state = 1;
      }
      if(data.id){
        httpServer.updateNursingGrade(data,{headers: {'Content-Type': 'application/x-www-form-urlencoded'}}).then((res)=>{
           if (res.code === 200) {
              const args = {
                message: '通信成功',
                description: res.msg,
                duration: 2,
              };
              notification.success(args);
              _this.props.getNursingGradeList();
              _this.props.handleCancel();
            } else {
              if(res.message ==='Request failed with status code 500'){
                  console.log(res.message);
               }else{
                   const args = {
                  message: '通信失败',
                  description: res.msg,
                  duration: 2,
                };
                notification.error(args);
               }
              }
          }).catch((err)=>{
            console.log(err);
          });
        }else{
          httpServer.saveNursingGrade(data,{headers: {'Content-Type': 'application/x-www-form-urlencoded'}}).then((res)=>{
           if (res.code === 200) {
              const args = {
                message: '通信成功',
                description: res.msg,
                duration: 2,
              };
              notification.success(args);
              _this.props.getNursingGradeList();
              _this.props.handleCancel();
            } else {
              if(res.message ==='Request failed with status code 500'){
                  console.log(res.message);
               }else{
                   const args = {
                  message: '通信失败',
                  description: res.msg,
                  duration: 2,
                };
                notification.error(args);
               }
            }
        }).catch((err)=>{
          console.log(err);
        });
      }
    }else{
     this.props.handleCancel(); 
    }
  }


  render(){
    const {handleCancel,disFlag} = this.props;
    const {
      nursingGradeName , 
      money , 
      state=1 , 
      days,
      //operaterName,
    } = this.state.dataList;
    const formItemLayout = {
      labelCol: {
        xs: { span: 24 },
        sm: { span: 5 },
      },
      wrapperCol: {
        xs: { span: 24 },
        sm: { span: 19 },
      },
    };
    const tailFormItemLayout = {
      wrapperCol: {
        xs: {
          span: 24,
          offset: 0,
        },
        sm: {
          span: 16,
          offset: 8,
        },
      },
    };
    return(
      <Modal 
        title="护理等级"
        visible={true}
        onCancel={handleCancel}
        maskClosable = {false}//点击遮罩层不允许关闭
        footer = {null}
      >
        <Form hideRequiredMark onSubmit={this.handleSubmit}>
          <Form.Item
            label='退费启始天数'
            {...formItemLayout}
            style={{marginBottom:'4px'}}
          >
            <InputNumber  value={days} onChange={(e) => this.handleIptText('days',e)} style={{width:"100%"}} min={0} disabled={disFlag}/>
          </Form.Item>
          <Form.Item
            label='等级名称'
            {...formItemLayout}
            style={{marginBottom:'4px'}}
          >
            <Input placeholder='必填项' value={nursingGradeName} onChange={(e) => this.handleIptText('nursingGradeName',e)} disabled={disFlag}/>
          </Form.Item>
          <Form.Item
            label='费用'
            {...formItemLayout}
            style={{marginBottom:'4px'}}
          >
            <Input placeholder='必填项' value={money} onChange={(e) => this.handleIptText('money',e)} disabled={disFlag}/>
          </Form.Item>
          <Form.Item
            label='状态'
            {...formItemLayout}
            style={{marginBottom:'4px'}}
          >
            <RadioGroup value={state} onChange={(e) => this.handleIptText('state',e)} disabled={disFlag}>
              <Radio value={1}>正常</Radio>
              <Radio value={0}>无效</Radio>
            </RadioGroup>
            （默认值：正常）
          </Form.Item>
          <Form.Item {...tailFormItemLayout}>
            <Button type="primary" htmlType="submit">确认</Button>
          </Form.Item>
        </Form>
      </Modal>
    )
  }
}

export default ModalInfo;
/*
 <Form.Item
            label='操作员'
            {...formItemLayout}
            style={{marginBottom:'4px'}}
          >
            <Input placeholder='必填项' value={operaterName} onChange={(e) => this.handleIptText('operaterName',e)} disabled/>
          </Form.Item>
 */