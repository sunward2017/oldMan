import React, { Component } from 'react';
import { Layout } from 'antd';
import './style/index.less';
import SiderCustom from './components/SiderCustom';
import HeaderCustom from './components/HeaderCustom';
import { receiveData } from './action';
import { connect } from 'react-redux';
import Routes from './routes';

//import 'bootstrap/dist/css/bootstrap.min.css'
//import 'bootstrap/dist/js/bootstrap.min.js'

const { Content, Footer } = Layout;

class App extends Component {
    state = {
        collapsed: false,
        auth: JSON.parse(localStorage.getItem('auth')) || null,
    };
    componentWillMount() {
        const { history } = this.props;
        const { auth } = this.state;
        if( auth ){
            auth.level === 2 && history.replace('/app/admin/dashboard/index');
        } else {
            history.push('/login');
        }
        this.getClientWidth();
        window.onresize = () => {
            console.log('屏幕变化了');
            this.getClientWidth();
            // console.log(document.body.clientWidth);
        }
    }
    componentDidMount() {
        console.log('my props:',this.props);
    }
    getClientWidth = () => {    // 获取当前浏览器宽度并设置responsive管理响应式
        const clientWidth = document.body.clientWidth;
        // console.log(clientWidth);
        this.props.isMobileView({isMobile: clientWidth <= 992}, 'responsive');
    };
    toggle = () => {
        this.setState({
            collapsed: !this.state.collapsed,
        });
    };
    render() {
        // console.log(this.props.responsive);
        const { responsive } = this.props;
        const { auth } = this.state;
        return (
            <Layout>
                {!responsive.data.isMobile && <SiderCustom collapsed={this.state.collapsed} auth={auth}/>}
                <Layout style={{flexDirection: 'column'}}>
                    <HeaderCustom toggle={this.toggle} collapsed={this.state.collapsed} user={auth || {}} />
                    <Content style={{ margin: '0 16px', overflow: 'initial' }}>
                        <Routes auth={auth} />
                    </Content>
                    <Footer style={{ textAlign: 'center' }}>
                       
                    </Footer>
                </Layout>
                
                {
                    responsive.data.isMobile && (   // 手机端对滚动很慢的处理
                        <style>
                        {`
                            #root{
                                height: auto;
                            }
                        `}
                        </style>
                    )
                }
            </Layout>
        );
    }
}

const mapStateToProps = state => {
    const { responsive = {data: {}} } = state.httpData;
    const auth = state.myAuth;
    return {auth, responsive};
};
const mapDispatchToProps = dispatch => ({
    isMobileView:(data) => {
        dispatch(receiveData(data))
    }
});
export default connect(mapStateToProps, mapDispatchToProps)(App);
