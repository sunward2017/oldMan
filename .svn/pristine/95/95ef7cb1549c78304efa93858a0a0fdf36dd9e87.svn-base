import React , { Component , Fragment } from 'react';
import BreadcrumbCustom from '../../BreadcrumbCustom';
import httpServer from '../../../axios';
import {Row,Col,Button,Select,Input,DatePicker,Divider,Popconfirm,Table,Form,notification,Modal,Tree,Icon,InputNumber} from 'antd';
import moment from 'moment';
import Search from './search';

const Option = Select.Option;
const { TreeNode } = Tree;
class WaterKwh extends Component{
  constructor(props){
    super(props);
    this.state = {
      pageFlag:true,//页面切换标志
      data:[],
      record:{},
      listAreaInfo:[],
      modalFlag:false,
      optionsList:[],//选中楼层后获取到的房间集合
      roomName:'',
      action:'add',
      searchFlag:false,
    };
    this.handleAdd = this.handleAdd.bind(this); //新增抄表、pageFlag To false
    this.handleCancle = this.handleCancle.bind(this);//取消编辑
    this.handleSubmit = this.handleSubmit.bind(this);//提交表单数据
    this.handleModalVisiable = this.handleModalVisiable.bind(this);//单击使modal可见
    this.handleModalCancel = this.handleModalCancel.bind(this);//单击使modal不可见
    this.onSelect = this.onSelect.bind(this);//单击选中树节点中的楼层
    this.handleIptWaterText = this.handleIptWaterText.bind(this);//水表度数发生变化
    this.handleIptKwhText = this.handleIptKwhText.bind(this);//电表度数发生变化
    this.handleSelectChange = this.handleSelectChange.bind(this);//房间名称发生变化
    this.handleRefresh = this.handleRefresh.bind(this);
    this.getListRegWaterKwh = this.getListRegWaterKwh.bind(this);
  }

  componentDidMount(){
    this.getListAreaTree();
    this.getListRegWaterKwh();
  }

  //获取listAreaTree
  getListAreaTree(){
    const {customerId} = this.props.auth;
    httpServer.listAreaInfo({customerId}).then((res)=>{
      if (res.code === 200) {
        res.data?this.setState({listAreaInfo:[res.data]}):this.setState({listAreaInfo:[]});
      } else {
        if(res.message ==='Request failed with status code 500'){
            console.log(res.message);
         }else{
            const args = {
            message: '通信失败',
            description: res.msg,
            duration: 2,
          };
          notification.error(args);
         }
      }
    }).catch((error)=>{
      console.log(error);
    });
  }
  getListRegWaterKwh(params){
    const {customerId} = this.props.auth;
    httpServer.listRegWaterKwh({customerId,...params}).then((res)=>{
      if (res.code === 200) {
        res.data?this.setState({data:res.data}):this.setState({data:[]});
      } else {
        if(res.message ==='Request failed with status code 500'){
            console.log(res.message);
         }else{
            const args = {
            message: '通信失败',
            description: res.msg,
            duration: 2,
          };
          notification.error(args);
         }
      }
    }).catch((error)=>{
      console.log(error);
    });
  }
  
  handleRefresh(){//刷新
    this.getListRegWaterKwh();
  }

  //增删改相关
  handleAdd(){ //新增抄表、pageFlag To false
    const {account} = this.props.auth;
    this.setState({pageFlag:false,record:{"optName":account},action:'add',optionsList:[],});
  }
  handleClickModify(record){//修改
    this.setState({pageFlag:false,record,action:'modify',optionsList:[]});
  }
  handleRowDelete(record){
    const {customerId} = this.props.auth;
    httpServer.deleteRegWaterKwh({customerId,id:record.id}).then((res)=>{
      if (res.code === 200) {
        const args = {
          message: '通信成功',
          description: res.msg,
          duration: 2,
        };
        notification.success(args);
        this.getListRegWaterKwh();
      } else {
        if(res.message ==='Request failed with status code 500'){
            console.log(res.message);
         }else{
            const args = {
            message: '通信失败',
            description: res.msg,
            duration: 2,
          };
          notification.error(args);
         }
      }
    }).catch((error)=>{
      console.log(error);
    });
  }
  handleCancle(){//取消编辑
    this.setState({pageFlag:true});
  }
  handleSubmit(){
    const _this = this;
    const {roomName,action} = this.state;
    const {roomCode,water,kwh,meterReaderPerson,regDate,optName} = this.state.record;
    if( !(roomCode && water && kwh && meterReaderPerson && regDate && optName)) {
      notification.warning({
        message: '提示：',
        description: '单据存在数据未填的情况，请仔细核对！',
      });
      return false
    }
    const data = _this.state.record;
    data.customerId = this.props.auth.customerId;
    data.regDate = moment(regDate).format('YYYY-MM-DD HH:mm:ss');
    if(data.id){
      if(action ==="add"){
        data.roomName = roomName;
      }
      httpServer.updateRegWaterKwh(data,{headers: {'Content-Type': 'application/x-www-form-urlencoded'}}).then((res)=>{
         if (res.code === 200) {
            const args = {
              message: '通信成功',
              description: res.msg,
              duration: 2,
            };
            notification.success(args);
            _this.setState({pageFlag:true});
            _this.getListRegWaterKwh();
          } else {
            if(res.message ==='Request failed with status code 500'){
                console.log(res.message);
             }else{
                 const args = {
                message: '通信失败',
                description: res.msg,
                duration: 2,
              };
              notification.error(args);
             }
            }
        }).catch((err)=>{
          console.log(err);
        });
      }else{
        data.roomName = roomName;
        httpServer.saveRegWaterKwh(data,{headers: {'Content-Type': 'application/x-www-form-urlencoded'}}).then((res)=>{
         if (res.code === 200) {
            const args = {
              message: '通信成功',
              description: res.msg,
              duration: 2,
            };
            notification.success(args);
           _this.setState({pageFlag:true});
           _this.getListRegWaterKwh();
          } else {
            if(res.message ==='Request failed with status code 500'){
                console.log(res.message);
             }else{
                 const args = {
                message: '通信失败',
                description: res.msg,
                duration: 2,
              };
              notification.error(args);
             }
          }
      }).catch((err)=>{
        console.log(err);
      });
    }
  }
  handleIptText(target,e) { //表单信息各字段发生变化
    let record = Object.assign({},this.state.record);
    record[target] = e.target ? e.target.value : e;
    this.setState({record});
  }
  handleIptWaterText(value){//水表度数发生变化
    let reg = /^[1-9]\d*$/;
    if(!reg.test(value)){
       const args = {
        message: '友情提示',
        description: "只允许输入正整数",
        duration: 2,
      };
      notification.info(args);
      return ;
    }
    let record = Object.assign({},this.state.record);
    record["water"] = value;
    this.setState({record});
  }
  handleIptKwhText(value){//电表度数发生变化
    let reg = /^[1-9]\d*$/;
    if(!reg.test(value)){
       const args = {
        message: '友情提示',
        description: "只允许输入正整数",
        duration: 2,
      };
      notification.info(args);
      return ;
    }
    let record = Object.assign({},this.state.record);
    record["kwh"] = value;
    this.setState({record});
  }
  handleSelectChange(value){//房间名称选择变化
    const {optionsList} = this.state;
    const arr = optionsList&&optionsList.filter(item => item.roomUuid === value);
    let record = Object.assign({},this.state.record);
    record["roomCode"] = value;
    this.setState({record,roomName:arr[0].roomName});
  }
  handleModalCancel(){//单击使modal不可见
    this.setState({modalFlag:false});
  }
  handleModalVisiable(){//单击使modal可见
    this.setState({modalFlag:true});
  }

  renderTreeNodes = data => data.map((item) => { //区域数渲染
    if (item.children && item.children.length>0) {
      return (
        <TreeNode title={item.areaName} key={item.areaCode} dataRef={item} disabled>
          {this.renderTreeNodes(item.children)}
        </TreeNode>
      );
    }
    return <TreeNode title={item.areaName} key={item.areaCode} dataRef={item} icon={<Icon type="check-circle" theme="twoTone" twoToneColor="#52c41a"/>}/>;
  })

  onSelect(selectedKeys,info){ //单击树节点
    const {customerId} = this.props.auth;
    const areaId = info.selectedNodes[0].props.dataRef.id;
    httpServer.listRoomInfo({customerId,areaId}).then((res)=>{
      if (res.code === 200) {
        let record = Object.assign({},this.state.record);
        record["roomCode"] = '';
        this.setState({record});
        res.data?this.setState({optionsList:res.data,modalFlag:false,action:'add'}):this.setState({optionsList:[],modalFlag:false,action:'add'});
      } else {
        if(res.message ==='Request failed with status code 500'){
            console.log(res.message);
         }else{
            const args = {
            message: '通信失败',
            description: res.msg,
            duration: 2,
          };
          notification.error(args);
         }
      }
    }).catch((error)=>{
      console.log(error);
    });
  }

  handleClickInquire(){
    this.setState({searchFlag:true});
  }
  handleClickInquireCancle(){
    this.setState({searchFlag:false});
  }
  render(){
    const {pageFlag,data,listAreaInfo,modalFlag,optionsList,action,searchFlag}  = this.state;
    const {roomCode,water,kwh,meterReaderPerson,regDate,optName,roomName} = this.state.record;
    const columns = [{
      title: '序号',
      render:(text,record,index)=>`${index+1}`,
      key:'serialNumber',
      width:'10%'
    },{
      title:'房间名',
      dataIndex: 'roomName',
      key: 'roomName',
      width:'10%'
    },{
      title: '本次水表度数',
      dataIndex: 'water',
      key: 'water',
      width:'10%'
    },{
      title:'本次电表度数',
      dataIndex: 'kwh',
      key: 'kwh',
      width:'10%'
    },{
      title: '登记日期',
      dataIndex: 'regDate',
      key: 'regDate',
      width:'15%'
    },{
      title:'抄表人员',
      dataIndex: 'meterReaderPerson',
      key: 'meterReaderPerson',
      width:'10%'
    },{
      title:'添加日期',
      dataIndex: 'addtime',
      key: 'addtime',
      width:'15%'
    },{
      title: '操作',
      dataIndex: 'action',
      key: 'action',
      render:(text,record)=>{
        return (
          <span>
            <a href="javascript:;" onClick={() => { this.handleClickModify(record) }} style={{color:'#2ebc2e'}}>修改</a>
            <Divider type="vertical" />
            <Popconfirm title="确定删除?" onConfirm={() => this.handleRowDelete(record)}>
              <a href="javascript:;" style={{color:'#2ebc2e'}}>删除</a>
            </Popconfirm>
          </span>
        )
      }
    }];
    return(
      <Fragment>
        <BreadcrumbCustom first="老人管理" second="水电记录" />
        {
          pageFlag?
          <Row>
            <Row style={{marginBottom:20}}>
                <Button type="primary" onClick={this.handleAdd} style={{marginRight:20}}>新增抄表</Button>
                <Button type="primary" onClick={this.handleRefresh} style={{marginRight:20}}>刷新</Button>
                <Button type="primary" onClick={() => { this.handleClickInquire() }}>查询</Button>
            </Row>
            <Row>
              <Table 
                bordered
                dataSource={data} 
                columns={columns} 
                pagination={{ showSizeChanger:true , showQuickJumper:true , pageSizeOptions:['10','20','30','40','50','100']}}
                rowKey={record => record.id}
              />
            </Row>
          </Row>:
          <Form hideRequiredMark >
            <Form.Item
              label='选择房间'
              style={{marginBottom:'10px'}}
            >
              <Button type="primary" onClick={this.handleModalVisiable}>选择区域</Button>
              <Select   placeholder="请先选择区域，才能房间" value={action==='add'?roomCode:roomName} onChange={this.handleSelectChange} style={{width:500}}>
                {optionsList&&optionsList.map(item => <Option key={item.roomUuid}>{item.roomName}</Option>)}
              </Select>
            </Form.Item>
            <Form.Item
              label='水表度数'
              style={{marginBottom:'10px'}}
            >
              <InputNumber  min={1} value={water} onChange={this.handleIptWaterText} style={{width:500}} placeholder="只允许输入正整数" />
            </Form.Item>
            <Form.Item
              label='电表度数'
              style={{marginBottom:'10px'}}
            >
              <InputNumber  min={1} value={kwh} onChange={this.handleIptKwhText} style={{width:500}} placeholder="只允许输入正整数" />
            </Form.Item>
            <Form.Item
              label='抄表人员'
              style={{marginBottom:'10px'}}
            >
              <Input value={meterReaderPerson} onChange={(e) => this.handleIptText('meterReaderPerson',e)} style={{width:500}} placeholder="请输入抄表人员"/>
            </Form.Item>
            <Form.Item
              label='抄表日期'
              style={{marginBottom:'10px'}}
            >
              <DatePicker format='YYYY-MM-DD HH:mm:ss' showTime value={regDate?moment(regDate,'YYYY-MM-DD HH:mm:ss'):null} onChange={(e) => this.handleIptText('regDate',e)} allowClear={false} style={{width:500}} showTime />
            </Form.Item>
            <Form.Item
              label='操作员'
              style={{marginBottom:'10px'}}
            >
              <Input value={optName} onChange={(e) => this.handleIptText('optName',e)} style={{width:500}} disabled/>
            </Form.Item>
            <Form.Item >
                <Button type="primary" onClick={this.handleSubmit}>提交</Button>
                <Button type="primary" onClick={this.handleCancle}>取消</Button>
            </Form.Item>
          </Form>
        }
        {
          modalFlag?
            <Modal 
              title="选择区域"
              visible={true}
              onCancel={this.handleModalCancel}
              footer={null}
            >
              <Tree       
                defaultExpandAll         
                onSelect={this.onSelect}
                showIcon={true}
              >
                {this.renderTreeNodes(listAreaInfo)}
              </Tree>
            </Modal>:null
        }
        {
          searchFlag?
            <Search 
              listAreaInfo={listAreaInfo} 
              customerId={this.props.auth.customerId}
              handleClickInquireCancle = {()=>{this.handleClickInquireCancle()}}
              getListRegWaterKwh = {this.getListRegWaterKwh}
            />:null
            
        }
      </Fragment>
    )
  }
} 

export default WaterKwh;