import React,{Component} from 'react';
import {Modal, Form, Input, DatePicker,  Radio, notification, Button} from 'antd';
import httpServer from '../../../axios';
import moment from 'moment';
// import PicturesWall from './UploadImg'

const RadioGroup = Radio.Group;
const { TextArea } = Input;
class ModalInfo extends Component{
  constructor(props){
    super(props);
    console.log(props.record);
    this.state = {
      dataList:props.record,
    }
    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleChangeUrl = this.handleChangeUrl.bind(this);
    this.handleDeleteUrl = this.handleDeleteUrl.bind(this);
  }

   handleChangeUrl(url){
        const newDataList = this.state.dataList;
        const url1 = {};
        url1.faceUrl = url;
        this.setState({
            dataList:Object.assign(newDataList,url1)
        });
    }
    handleDeleteUrl(){
        const newDataList = this.state.dataList;
        delete newDataList.faceUrl;
         this.setState({
            dataList:newDataList
        });
    }

  handleIptText(target,e) {
    let dataList = Object.assign({},this.state.dataList);
    dataList[target] = e.target ? e.target.value : e;
    this.setState({dataList});
  }

  handleSubmit(){
    const {action} = this.props;
    const _this = this;
    const {customerId} = JSON.parse(localStorage.getItem('auth'));
    const {workerName, sex, phone, jobNumber, entryTime,status} = _this.state.dataList;
    if(action!=='read'){
      if( !(workerName && phone && jobNumber )) {
      notification.warning({
        message: '提示：',
        description: '单据存在数据未填的情况，请仔细核对！',
      });
      return false
      }
      if(!(/^1[34578]\d{9}$/.test(phone))){ 
          notification.warning({
          message: '提示：',
          description: '手机号格式不正确，请重新填写',
        });  
          return false; 
      } 
      if(workerName.replace(/\s+/g,"").length<2 || workerName.replace(/\s+/g,"").length>20){
        notification.warning({
          message: '提示：',
          description: '姓名不能包含空格，且字符个数长度在2~20之间',
        });  
          return false;
      }
      const data = _this.state.dataList;
      data.customerId = customerId;
      if(sex !==0){
        data.sex = 1;
      }
      if(status !==0){
        data.status = 1;
      }
      data.entryTime = moment(entryTime).format('YYYY-MM-DD HH:mm:ss');
      if(data.id){
        httpServer.updateWorkerInfo(data,{headers: {'Content-Type': 'application/x-www-form-urlencoded'}}).then((res)=>{
           if (res.code === 200) {
              const args = {
                message: '通信成功',
                description: res.msg,
                duration: 2,
              };
              notification.success(args);
              _this.props.getWorkerList();
              _this.props.handleCancel();
            } else {
              if(res.message ==='Request failed with status code 500'){
                  console.log(res.message);
               }else{
                   const args = {
                  message: '通信失败',
                  description: res.msg,
                  duration: 2,
                };
                notification.error(args);
               }
              }
          }).catch((err)=>{
            console.log(err);
          });
        }else{
          httpServer.saveWorkerInfo(data,{headers: {'Content-Type': 'application/x-www-form-urlencoded'}}).then((res)=>{
           if (res.code === 200) {
              const args = {
                message: '通信成功',
                description: res.msg,
                duration: 2,
              };
              notification.success(args);
              _this.props.getWorkerList();
              _this.props.handleCancel();
            } else {
              if(res.message ==='Request failed with status code 500'){
                  console.log(res.message);
               }else{
                   const args = {
                  message: '通信失败',
                  description: res.msg,
                  duration: 2,
                };
                notification.error(args);
               }
            }
        }).catch((err)=>{
          console.log(err);
        });
      }
    }else{
     this.props.handleCancel(); 
    }
    
    

  }


  render(){
    const {handleCancel,disFlag} = this.props;
    const {workerName, sex=1, phone, jobNumber, entryTime, status=1, memo,faceUrl} = this.state.dataList;
    const formItemLayout = {
      labelCol: {
        xs: { span: 24 },
        sm: { span: 5 },
      },
      wrapperCol: {
        xs: { span: 24 },
        sm: { span: 19 },
      },
    };
    const tailFormItemLayout = {
      wrapperCol: {
        xs: {
          span: 24,
          offset: 0,
        },
        sm: {
          span: 16,
          offset: 8,
        },
      },
    };
    return(
      <Modal 
        title="护工信息"
        visible={true}
        onCancel={handleCancel}
        maskClosable = {false}//点击遮罩层不允许关闭
        footer = {null}
      >
        {
          /*<PicturesWall changUrl={this.handleChangeUrl} deleteUrl={this.handleDeleteUrl} A01={faceUrl}/>*/
        }
        <Form hideRequiredMark onSubmit={this.handleSubmit}>
          <Form.Item
            label='姓名'
            {...formItemLayout}
            style={{marginBottom:'4px'}}
          >
            <Input placeholder='必填项' value={workerName} onChange={(e) => this.handleIptText('workerName',e)} disabled={disFlag}/>
          </Form.Item>
          <Form.Item
            label='性别'
            {...formItemLayout}
            style={{marginBottom:'4px'}}
          >
            <RadioGroup value={sex} onChange={(e) => this.handleIptText('sex',e)} disabled={disFlag}>
              <Radio value={1}>男</Radio>
              <Radio value={0}>女</Radio>
            </RadioGroup>
            （默认值：男）
          </Form.Item>
          <Form.Item
            label='电话'
            {...formItemLayout}
            style={{marginBottom:'4px'}}
          >
            <Input placeholder='必填项' value={phone} onChange={(e) => this.handleIptText('phone',e)} disabled={disFlag}/>
          </Form.Item>
          <Form.Item
            label='工号'
            {...formItemLayout}
            style={{marginBottom:'4px'}}
          >
            <Input placeholder='必填项' value={jobNumber} onChange={(e) => this.handleIptText('jobNumber',e)} disabled={disFlag}/>
          </Form.Item>
          <Form.Item
            label='入职日期'
            {...formItemLayout}
            style={{marginBottom:'4px'}}
          >
            <DatePicker format='YYYY-MM-DD HH:mm:ss' showTime value={entryTime?moment(entryTime,'YYYY-MM-DD HH:mm:ss'):null} onChange={(e) => this.handleIptText('entryTime',e)} allowClear={false} disabled={disFlag}/>
          </Form.Item>
          <Form.Item
            label='状态'
            {...formItemLayout}
            style={{marginBottom:'4px'}}
          >
            <RadioGroup value={status} onChange={(e) => this.handleIptText('status',e)} disabled={disFlag}>
              <Radio value={1}>在职</Radio>
              <Radio value={0}>离职</Radio>
            </RadioGroup>
            （默认值：在职）
          </Form.Item>
          <Form.Item
            label='备注'
            {...formItemLayout}
            style={{marginBottom:'4px'}}
          >
            <TextArea value={memo} onChange={(e) => this.handleIptText('memo',e)} disabled={disFlag}/>
          </Form.Item>
          <Form.Item {...tailFormItemLayout}>
            <Button type="primary" htmlType="submit">确认</Button>
          </Form.Item>
        </Form>
      </Modal>
    )
  }
}

export default ModalInfo;