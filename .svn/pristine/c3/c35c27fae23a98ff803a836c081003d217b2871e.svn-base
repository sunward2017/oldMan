import React,{Fragment} from 'react';
import { Card, Input,InputNumber,Modal,Button, Row,Col,Form, Avatar, notification, Divider,Icon,Tag,DatePicker,Select,TreeSelect } from 'antd';
import httpServer from '@/axios';
import moment from 'moment';

const SHOW_PARENT = TreeSelect.SHOW_PARENT;
const TreeNode = TreeSelect.TreeNode;
const { Meta } = Card;
const Option = Select.Option;
class changeRoom extends React.Component {
    state={
       nursingGrades:{},
       nurses:[],
       treeData:[],
       rooms:[],
       beds:[],
    };
    componentDidMount(){
       this.fetchElderlyRoomTree(); 
       this.fetchNursingGrade();
       this.fetchNurse();
    }

    notice(status, msg) {
        let text = status==='success' ? '成功' : (status === 'error'? '失败' : '');
        notification[status]({
            message: `${text}提示:`,
            description:msg,
            duration:2
        })
    }
    fetchNursingGrade(){
    	const {customerId} = this.props.elderlyInfo;
    	httpServer.listNursingGrade({customerId}).then((res)=>{
        	if(res.data){
        		const data ={}; 
        		res.data.forEach(i=>{
        			data[i.nursingGradeCode]= i.nursingGradeName;
        		})
        	
        		this.setState({nursingGrades:data})
        	} 
        })
    }
    fetchNurse(){
    	const {customerId} = this.props.elderlyInfo;
    	httpServer.listNurseInfo({customerId}).then((res)=>{
    	   if(res.code===200){
    	   	 const data = res.data?res.data:[];
    	   	 this.setState({nurses:data});
    	   } 
    	})
    }
    cancel=()=>{
    	this.props.close();
    }
    handleOk=()=>{
     
      this.props.form.validateFieldsAndScroll((err, fieldsValue) => {
    	  if(!err){
    	  	const {elderlyInfo} = this.props;
    	  	const roomName = this.state.rooms.find(i=>(i.roomUuid===fieldsValue['newRoomCode'])).roomName;
    	  	let values = {
    	  		...fieldsValue,
    	  		'changeTime':fieldsValue['changeTime'].format('YYYY-MM-DD HH:mm:ss'),
    	  		elderlyId:elderlyInfo.id,
    	  		oldBedCode:elderlyInfo.bedNumber,
    	  		oldRoomCode:elderlyInfo.roomCode,
    	  		newRoomName:roomName
    	  	}
    	  	httpServer.savechangeRoom(values).then(res=>{
    	  		if(res.code===200){
    	  		   this.notice('success','房间变更');
    	  		}else{
    	  			this.notice('error','房间变更')
    	  		}
    	  		this.props.close();
    	  	})
    	  }
       })
    }
     fetchElderlyRoomTree(){
     	const {customerId} = this.props.elderlyInfo;
        httpServer.listAreaInfo({customerId}).then(res => {
            res.code ===200 ? this.setState({treeData:[res.data]}) : this.setState({treeData:[]});
        })
    }
    onTreeSelectChangeHandler = (value) => {
    	 this.props.form.setFieldsValue({
	          newRoomCode:null,
	     });
        const {customerId} = this.props.elderlyInfo;
	    httpServer.listRoomInfo({customerId,areaId:value}).then((res)=>{
	      if (res.code === 200) {
	        this.setState({rooms:res.data||[]})
	      } else {
	        if(res.message ==='Request failed with status code 500'){
	            console.log(res.message);
	         }else{
	            const args = {
	            message: '通信失败',
	            description: res.msg,
	            duration: 2,
	          };
	          notification.error(args);
	         }
	        this.setState({rooms:[]})
	      }

	    }).catch((error)=>{
	      console.log(error);
	    });
    };
    roomChange=(v)=>{
       this.props.form.setFieldsValue({
	          bedNumber:null,
	        });
       httpServer.listBedInfoByRoomId({roomUuid:v}).then((res)=>{
	      if(res.code===200){
	         this.setState({beds:res.data||[]})
	      }else{
	        const args = {
	          message: '通信失败',
	          description: res.msg,
	          duration: 2,
	        };
	        notification.error(args);
	      }
	    }).catch((error)=>{
	      console.log(error);
	    });
    }
    renderTreeNodes = data => data.map(item => {
        if (item.children) {
            return (
                <TreeNode title={item.areaName} key={item.id} value={item.id}>
                    {this.renderTreeNodes(item.children)}
                </TreeNode>
            );
        }
        return <TreeNode title={item.areaName} key={item.id} value={item.id} />;
    });
    
    render() {
        const { getFieldDecorator } = this.props.form;
        const {elderlyInfo} = this.props;
        const {nursingGrades,nurses,treeData,rooms,beds} = this.state;
		return ( 
        	<Modal
		        title="换房处理"
		        okText='提交'
		        width="40%"
		        visible={true}
		        onOk={this.handleOk}
		        onCancel={this.cancel}
		        maskClosable={false}
		      >
                <Card title="基础信息">
				    <Meta
				        avatar={<Avatar src="http://imgsrc.baidu.com/imgad/pic/item/09fa513d269759ee03b7bedab8fb43166d22df38.jpg" />}
				        title={elderlyInfo.name}
				        description={
				        	<span>性别:&emsp;<Tag color="#108ee9">{elderlyInfo.sex===1?'男':'女'}</Tag>
				        	&emsp;年龄:&emsp;<Tag color="orange">{elderlyInfo.age}岁</Tag>
				        	&emsp;护理等级: <Tag color="geekblue">{nursingGrades[elderlyInfo.nursingGradeCode]||'无'}</Tag>
				        	&emsp;房间号:<Tag color="#2db7f5">{elderlyInfo.roomName}</Tag>
				            &emsp;床号:<Tag color="purple">{elderlyInfo.bedNumber}</Tag>
				            </span>
				        }
				    />
				</Card>
				<Divider orientation="left">变更记录</Divider>
				<Form  className="ant-advanced-search-form">
				  <Row gutter={24}>
				    <Col span={8} >
				       <Form.Item label="区域">
						    <TreeSelect className="w-full"
		                            showSearch
							        dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}
							        placeholder="请选择区域"
							        allowClear
							        treeDefaultExpandAll
							        onChange={this.onTreeSelectChangeHandler}
					           >
                                {this.renderTreeNodes(treeData)}
                             </TreeSelect>
                        </Form.Item>
				    </Col>
				    <Col span={8}>
			        <Form.Item label="新房间">
			          {getFieldDecorator('newRoomCode', {
			            rules: [{ required: true, message: '请选择房间' }],
			          })(
			            <Select onChange={this.roomChange}>
			             {
			             	rooms.map(n=>(<Option key={n.id} value={n.roomUuid}>{n.roomName}</Option>))
			             }
			            </Select>
			          )}
			        </Form.Item>
			        </Col>
			        <Col span={8} >
			        <Form.Item
			          label="新床号"
			        >
			          {getFieldDecorator('newBedCode', {
			            rules: [{ required: true, message: '请选择床号' }],
			          })(
			             <Select>
			              {
			              	beds.map(item => <Option key={item.bedName}  value={item.bedCode}>{item.bedName}</Option>)
			              }
			            </Select>
			          )}
			        </Form.Item>
			        </Col>
				   <Col span={8} >
			        <Form.Item
			          label="原房间水表度数"
			        >
			          {getFieldDecorator('oldWaterMeter', {
			            rules: [{
			              required: true, message: '请输入原水表度数',
			            }],
			          })(
			            <InputNumber min={0}/>
			          )}
			        </Form.Item>
			        </Col>
			        <Col span={8} >
			        
			        <Form.Item
			          label="原房间电表度数"
			        >
			          {getFieldDecorator('oldKmhMeter', {
			            rules: [{
			              required: true, message: '请输入原房间电表度数',
			            }],
			          })(
			            <InputNumber min={0}/>
			          )}
			        </Form.Item>
			        </Col>
			        <Col span={8} >
			        <Form.Item
			          label="抄表人"
			        >
			          {getFieldDecorator('meterReaderPerson', {
			            rules: [{ required: true, message: '请输入抄表人' }],
			          })(
			            <Input />
			          )}
			        </Form.Item>
			        </Col>
			        
			        <Col span={8}>
			        <Form.Item
			          label="新房间水表度数"
			        >
			          {getFieldDecorator('newWaterMeter', {
			            rules: [{
			              required: true, message: '请输入原水表度数',
			            }],
			          })(
			            <InputNumber min={0}/>
			          )}
			        </Form.Item>
			        </Col>
			        <Col span={8} >
			        <Form.Item
			          label="新房间电表度数"			        
			        >
			          {getFieldDecorator('newKmhMeter', {
			            rules: [{
			              required: true, message: '请输入原房间电表度数',
			            }],
			          })(
			            <InputNumber min={0}/>
			          )}
			        </Form.Item>
			        </Col>
			        <Col span={8} >
			        <Form.Item
			          label="原水费比例"
			        >
			          {getFieldDecorator('shareProportionWater', {
			            rules: [{
			              required: false, message: '请输入承当水费比例',
			            }],
			            initialValue:elderlyInfo.shareProportionWater
			          })(
			            <InputNumber
			              min={0}
					      max={100}
					      formatter={value => `${value}%`}
					      parser={value => value.replace('%', '')}
					      disabled
			            />
			          )}
			        </Form.Item>
			        </Col>
			        
			        <Col span={8} >
			        <Form.Item
			           label="护士"
			        >
			          {getFieldDecorator('nursingName', {
			            rules: [{ required: true, message:'请输入承当电费比例'}],
			          })(
			             <Select>
			              {
			              	nurses.map(i=>(<Select.Option key={i.id} value={i.nurseName}>{i.nurseName}</Select.Option>))
			              }
			             </Select>
			          )}
			        </Form.Item>
			        </Col>
			        <Col span={8} >
			        <Form.Item
			           label="换房日期"
			        >
			          {getFieldDecorator('changeTime', {
			            rules: [{ required: true, message:'请输入换房日期'}],
			            initialValue:moment()
			          })(
			            <DatePicker />
			          )}
			        </Form.Item>
			        </Col>
			        <Col span={8} >
			        <Form.Item
			           label="原电费比例"
			        >
			          {getFieldDecorator('shareProportionPower', {
			            rules: [{ required: false, message:'请输入承当电费比例' }],
			            initialValue:elderlyInfo.shareProportionPower
			          })(
			            <InputNumber
			              min={0}
					      max={100}
					      formatter={value => `${value}%`}
					      parser={value => value.replace('%', '')}
					      disabled
			            />
			          )}
			        </Form.Item>
			        </Col>
			        </Row>
			      </Form> 
			      <style>{`
			        .ant-advanced-search-form {
					  padding: 24px;
					  background: #fbfbfb;
					  border: 1px solid #d9d9d9;
					  border-radius: 6px;
					}
					
					.ant-advanced-search-form .ant-form-item {
					  display: flex;
					}
					
					.ant-advanced-search-form .ant-form-item-control-wrapper {
					  flex: 1;
					}	
			      `}</style>
            </Modal>    
        )
    }
}
export default Form.create()(changeRoom)