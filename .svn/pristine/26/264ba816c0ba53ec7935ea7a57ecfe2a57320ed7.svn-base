import React, {
	Component,
	Fragment
} from 'react';
import { Table, Tag, Divider, Popconfirm, Button, Modal, Form, Input, DatePicker, Radio, Select,notification,InputNumber} from 'antd';
import BreadcrumbCustom from '../BreadcrumbCustom';
import moment from 'moment';
import httpServer from '@/axios/index';

const RadioGroup = Radio.Group;
class CMT extends Component {
	constructor(props) {
		super(props);
		this.state = {
			dataSource: [],
			modalFlag: false,
			record: '',
			iconLoading:false,
			customerId:'',
		}
	}
	
	componentDidMount() {
		const auth = JSON.parse(sessionStorage.getItem('auth'));
		this.setState({customerId:auth.customerId},function(){
			this.List()
		})
	}
	
	List() {
		const customerId = this.state.customerId;
		httpServer.listAppointmentInfo({customerId}).then(res => {
			if(res.code===200&&res.data) {
				const dataSource = {...res.data,...res.data.tbElderlyInfo}
				this.setState({	dataSource })
			}
		})
	}
	 
	/*修改操作*/
	handleModify(record) {
		this.setState({
			modalFlag: true,
			record
		});
	}
	/*删除操作*/
	handleRowDelete(id, record) {
        const _this = this;
	    httpServer.deleteAppointmentInfo ({id}).then(res => {
	    	
	      if (res.code === 200) {
	        const args = {
	          message: '通信成功',
	          description: res.msg,
	          duration: 2,
	        };
	        notification.success(args);
	        _this.List();
	      } else {
	        console.log(res.message);
	      }
	      this.setState({modalFlag:false,record:''});
	    }).catch(
	      err => { console.log(err) }
	    )
	}
	/*添加按钮*/
	handleAdd() {
		this.setState({
			modalFlag: true,
			record: ''
		});
	}

	/*关闭弹框*/
	handleCancel() {
		this.setState({
			modalFlag: false,
			record: ''
		});
	}
	/*提交完成添加客户信息*/
	handleSubmit = (e) => {
		e.preventDefault();
		let _this = this;
		this.props.form.validateFieldsAndScroll((err, fieldsValue) => {
			if(!err) {
				this.setState({ iconLoading: true });
				const {name,sex,age}= fieldsValue;
				const customerId = this.state.customerId;
				const values = {
					...fieldsValue,
					customerId,
					'lastTime': fieldsValue['lastTime'].format('YYYY-MM-DD HH:mm:ss'),
					'tbElderlyInfo': {name,sex,age,customerId}
				};
			  const { id }= this.state.record;
			  
              if(id){
              	    values.id = id;
				    let request = new Request('http://192.168.10.235:9751/updateAppintmentInfo', {
			        body: JSON.stringify(values),
			        method: 'POST',
			        headers: new Headers({
			          'Content-Type': 'application/json;charset=utf-8'
			        })
			      });
			      fetch(request).then(resp => resp.json()).then( res => {
			      	
			      	 if(res.code===200){
						const args = {
							message: '通信成功',
							description: res.msg,
							duration: 2,
						};
						notification.success(args);
						this.setState({
							modalFlag: false,
							record: '',
							iconLoading:false,
						});
						}
						_this.List()
					})
			     
			   	    
			   }else{
			    let request = new Request('http://192.168.10.235:9751/saveAppintmentInfo', {
			        body: JSON.stringify(values),
			        method: 'POST',
			        headers: new Headers({
			          'Content-Type': 'application/json;charset=utf-8'
			        })
			      });
			      
			      fetch(request).then(resp => resp.json()).then( res => {
			      	 console.log('saveApp',res)
			      	 if(res.code===200){
						const args = {
							message: '通信成功',
							description: res.msg,
							duration: 2,
						};
						notification.success(args);
						this.setState({
							modalFlag: false,
							record: '',
							iconLoading:false,
						});
						}
						_this.List()
					})
		
			   	    
			   }

			}
		});
	}

	/*自定义手机号校验*/
	validatePhoneNumber(rule, value, callback) {
		if(value && !(/^[1][3,4,5,7,8][0-9]{9}$/.test(value))) {
			callback('手机号码格式不正确');
		} else {
			callback();
		}
	}

	render() {
		const {
			getFieldDecorator
		} = this.props.form;
		const {
			dataSource,
			modalFlag,
		} = this.state;
		const {
			appointmentPersonnel,
			phone,
			address,
			paidMoney,
			paidType,
			payableMoney,
			lastTime,
			name,
			sex,
			age
		} = this.state.record;
		const formItemLayout = {
			labelCol: {
				xs: {
					span: 24
				},
				sm: {
					span: 4
				},
			},
			wrapperCol: {
				xs: {
					span: 24
				},
				sm: {
					span: 20
				},
			},
		};

		const tailFormItemLayout = {
			wrapperCol: {
				xs: {
					span: 24,
					offset: 0,
				},
				sm: {
					span: 16,
					offset: 8,
				},
			},
		};

		const columns = [{
			title: '序号',
			render: (text, record, index) => `${index+1}`,
			width: '5%',
			key:'index'
		},  {
			title: '预约人',
			dataIndex: 'appointmentPersonnel',
			key: 'appointmentPersonnel',
			width: '5%'
		}, {
			title: '电话号码',
			dataIndex: 'phone',
			key: 'phone',
			width: '10%'
		}, {
			title: '老人姓名',
			dataIndex: 'name',
			key: 'name',
			width: '15%'
		}, {
			title: '性别',
			dataIndex: 'sex',
			key: 'sex',
			width: '5%',
			render: (text, record) => {
				return text === 1 ? < Tag color = "green" >男 </Tag>:< Tag color = "red">女</Tag >
			}
		}, {
			title: '预定日期',
			dataIndex: 'lastTime',
			key: 'lastTime',
			width: '5%',
			render: (text, record) => {
				return moment(text).format('YYYY-MM-DD')
			}
		},{
			title: '状态',
			dataIndex: 'status',
			key: 'status',
			render: (text, record) => {
				return record.status === 1 ? < Tag color = "green" > 正常 </Tag>:<Tag color="red">注销</Tag >
			},
			width: '5%'
		}, {
			title: '地址',
			dataIndex: 'memo',
			key: 'memo',

		}, {
			title: '操作',
			dataIndex: 'action',
			key: 'action',
			width: '12%',
			render: (text, record) => {
				return(
					<span>
            <a href="javascript:;" onClick={() => { this.handleModify(record) }} style={{color:'#2ebc2e'}}>修改</a>
              <Divider type="vertical" />
              <Popconfirm title="确定删除?" onConfirm={() => this.handleRowDelete(record.id,record)}>
                <a href="javascript:;" style={{color:'#2ebc2e'}}>删除</a>
              </Popconfirm>
          </span>
				)
			},
		}];
		return(
			<div>
        <BreadcrumbCustom first="预约管理" second='房间预订' />
        <Button type='primary' onClick={()=>{this.handleAdd()}}>点击添加</Button>
        <Divider/>
        <Table 
            bordered
            rowKey='id' 
            dataSource={dataSource} 
            columns={columns} 
            pagination={{ showSizeChanger:true ,showQuickJumper:true,pageSizeOptions:['10','20','30','40','50','100','200']}}
          />
       
        {
          modalFlag?
          <Modal 
            title="预约信息输入"
            // width='60%'
            okText='提交'
            visible={modalFlag}
           
            onCancel={()=>{this.handleCancel()}}
            maskClosable={false}
            footer={null}
          >
            <Form hideRequiredMark onSubmit={this.handleSubmit}>
              <Form.Item
                label='预约人'
                {...formItemLayout}
                style={{marginBottom:'4px'}}
              >
                {getFieldDecorator('appointmentPersonnel', {
                  rules: [{ required: true, message: '请输入预约人!' }],
                  initialValue:appointmentPersonnel,
                })(
                  <Input />
                )}
              </Form.Item>
              <Form.Item
                label='电话号码'
                {...formItemLayout}
                style={{marginBottom:'4px'}}
              >
                {getFieldDecorator('phone', {
                  rules: [{ required: true, message: '请输入电话号码!' },{
                    validator:this.validatePhoneNumber,
                  }],
                  initialValue:phone,
                })(
                  <Input />
                )}
              </Form.Item>
              <Form.Item
                label='地址'
                {...formItemLayout}
                style={{marginBottom:'4px'}}
              >
                {getFieldDecorator('address', {
                  rules: [{ required: true, message: '请输入联系地址!' }],
                  initialValue:address,
                })(
                  <Input />
                )}
              </Form.Item>
              <Form.Item
                label='老人姓名'
                {...formItemLayout}
                style={{marginBottom:'4px'}}
              >
                {getFieldDecorator('name', {
                  rules: [{ required:true, message: '请输入老人姓名!' }],
                  initialValue:name,
                })(
                  <Input />
                )}
              </Form.Item>
              <Form.Item
                label='性别'
                {...formItemLayout}
                style={{marginBottom:'4px'}}
              >
                {getFieldDecorator('sex', {
                  rules: [{ required: true, message: '请选择性别!' }],
                  initialValue:sex,
                })(
                  <RadioGroup>
                    <Radio value={1}>男</Radio>
                    <Radio value={0}>女</Radio>
                  </RadioGroup>
                )}
              </Form.Item>
              <Form.Item
                label='年龄'
                {...formItemLayout}
                style={{marginBottom:'4px'}}
              >
                {getFieldDecorator('age', {
                  rules: [{ required: true, message: '请输入年龄信息!' }],
                  initialValue:age,
                })(
                  <InputNumber min={1} max={120}/>
                )}
              </Form.Item>
              <Form.Item
                label='已付定金'
                {...formItemLayout}
                style={{marginBottom:'4px'}}
              >
                {getFieldDecorator('payableMoney', {
                  rules: [{ required: true, message: '请输入定金金额' }],
                  initialValue:payableMoney,
                })(
                  <InputNumber min={1} />
                )}
              </Form.Item>
              <Form.Item
                label='预付款'
                {...formItemLayout}
                style={{marginBottom:'4px'}}
              >
                {getFieldDecorator('paidMoney', {
                  rules: [{ required: true, message: '请输入预付金额!' }],
                  initialValue:paidMoney,
                })(
                  <InputNumber min={1} />
                )}
              </Form.Item>
              <Form.Item
                label='付款方式'
                {...formItemLayout}
                style={{marginBottom:'4px'}}
              >
                {getFieldDecorator('paidType', {
                  rules: [{ required: true, message: '请输入付款方式!' }],
                  initialValue:paidType,
                })(
                   <Radio.Group  buttonStyle="solid">
			        <Radio.Button value="1">支付宝</Radio.Button>
			        <Radio.Button value="2">微信</Radio.Button>
			        <Radio.Button value="3">银行转账</Radio.Button>
			        <Radio.Button value="4">其他</Radio.Button>
			      </Radio.Group>
                )}
              </Form.Item>
              <Form.Item
                label='预订日期'
                {...formItemLayout}
                style={{marginBottom:'4px'}}
              >
                {getFieldDecorator('lastTime', {
                  rules: [{ required: false, message: '请选择日期!' }],
                  initialValue:lastTime?moment(lastTime,'YYYY-MM-DD') : null,
                })(
                  <DatePicker format='YYYY-MM-DD' />
                )}
              </Form.Item>
              <Form.Item {...tailFormItemLayout}>
                <Button type="primary" htmlType="submit"  loading={this.state.iconLoading}>确认提交</Button>
              </Form.Item>
            </Form>
          </Modal>:null
        }
      </div>
		)
	}
}
const Nurse = Form.create()(CMT);
export default Nurse;