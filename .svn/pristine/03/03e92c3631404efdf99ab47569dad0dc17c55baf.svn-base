import React ,{ Component } from 'react';
import {Modal , Table ,Form ,InputNumber,DatePicker,Radio ,Input,Button,notification} from 'antd';
import httpServer from '@/axios';
import ElderlySelect from '@/common/elderlySelect'
import DrugList from '@/common/drugList'
import moment from 'moment'
 
const RadioGroup = Radio.Group;

class drugForm extends Component{
  constructor(props){
    super(props);
    this.state = {
      drugInfo:{},
    }
  }
  handleDrug=()=>{
  	let that = this;
  	this.props.form.validateFieldsAndScroll((err, fieldsValue) => {
  		if(!err){
  			let values = {...fieldsValue,drugCode:fieldsValue['drugCode'].drugCode,validityDate:fieldsValue['validityDate'].format('YYYY-MM-DD')}
  			if(this.state.drugInfo.id)values.id= this.state.drugInfo.id;
  			that.props.handleDrug(values);
  		}
  	})
  }
  cancle=()=>{
  	 this.props.cancel(); 
  }
  drugChange=(v)=>{
  	this.setState({minUbit:v.minUnit});
  	this.props.form.setFieldsValue({
        minUbit:v.minUnit ,
    });
  }
  componentDidMount(){
  	 const drugInfo = this.props.drugInfo;
     this.setState({drugInfo}) 	
  }
 
  render(){
    const {
		  getFieldDecorator
		} = this.props.form;
	const {units} = this.props;
	const {drugCode,quantity,minUbit,validityDate,} = this.state.drugInfo;
	
    const formItemLayout = {
      labelCol: {
        xs: { span: 24 },
        sm: { span: 5 },
      },
      wrapperCol: {
        xs: { span: 24 },
        sm: { span: 19 },
      },
    };
    const tailFormItemLayout = {
      wrapperCol: {
        xs: {
          span: 24,
          offset: 0,
        },
        sm: {
          span: 16,
          offset: 8,
        },
      },
    };
   
    return (
	       	<Modal
		        title="入库单信息"
		        okText='提交'
		        width="40%"
		        visible={true}
		        onOk={this.handleDrug}
		        onCancel={this.cancle}
		        maskClosable={false}
		      >
	       	<Form>
	       	  <Form.Item
                label='药品名称'
                {...formItemLayout}
                style={{marginBottom:'4px'}}
              >
                 {getFieldDecorator('drugCode', {
                  rules: [{ required: false, message: '请选择老人'}],
                  initialValue:drugCode
                })(
                   <DrugList onChange={this.drugChange}/>
                )}
              </Form.Item>
              <Form.Item
                label='数量'
                {...formItemLayout}
                style={{marginBottom:'4px'}}
              >
                {getFieldDecorator('quantity', {
                  rules: [{ required: true, message: '请输入数量'}],
                  initialValue:quantity
                })(
                    <InputNumber placeHolder="请输入入库数量" min={1}/>
                )}
              </Form.Item>
               <Form.Item
                label='最小单位'
                {...formItemLayout}
                style={{marginBottom:'4px'}}
              >
                {getFieldDecorator('minUbit', {
                  rules: [{ required: true, message: '请选择最小单位'}],
                  initialValue:minUbit
                })(
                  <RadioGroup buttonStyle="solid" disabled>
					    {units.map(i=>{
                		    return <Radio.Button value={i.value} key={i.id}>{i.value}</Radio.Button>
                	    })}
                  </RadioGroup>    
                )}
              </Form.Item>
               <Form.Item
                label='有效期至'
                {...formItemLayout}
                style={{marginBottom:'4px'}}
              >
                {getFieldDecorator('validityDate', {
                  rules: [{ required: true, message: '请输入单号'}],
                  initialValue:validityDate?moment(validityDate):moment()
                })(
                    <DatePicker/>
                )}
              </Form.Item>
            </Form>
          </Modal>
    )
  }
}

export default Form.create()(drugForm)