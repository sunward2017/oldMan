import React,{Component,Fragment} from 'react';
import {Tabs,Button,Form,Input,Radio,DatePicker,notification,Cascader,Select,InputNumber,Modal,Tree,Icon} from 'antd';
import moment from 'moment';
import httpServer from '../../../axios';
import FamilyMember from './familyMember';
import './index.css';
import BedInfo  from '@/common/bedInfo';

const TabPane = Tabs.TabPane;
const Option = Select.Option;
const { TreeNode } = Tree;
const { TextArea } = Input;
class OldManInfo1 extends Component{
  constructor(props){
    super(props);
    this.state = {
      oldManInfoList:props.oldManInfoList,
      chargeItemList:[],
      waterFlag:false,
      kwhFlag:false,
      mealFlag:false,
      modalFlag:false,
      optionsList:[],//选中楼层后获取到的房间集合
      roomName:'',
      optionsListBed:[],
      tab2Flag:props.tab2Flag,
      elderlyId:props.elderlyId,
      roomDisflag:props.roomDisflag,
      editFlag:props.editFlag,
      btnSubmitFlag:props.btnSubmitFlag,
      activeTabKey:'1',
    }
    this.handleConfirmIdNumber = this.handleConfirmIdNumber.bind(this);
    this.handleConfirmShareProportionWater = this.handleConfirmShareProportionWater.bind(this);
    this.handleConfirmShareProportionPower = this.handleConfirmShareProportionPower.bind(this);
    this.handleConfirmAge = this.handleConfirmAge.bind(this);
    this.handleWaterFeeLink = this.handleWaterFeeLink.bind(this);//水费添加关联
    this.handleKwhFeeLink = this.handleKwhFeeLink.bind(this);//电费添加关联
    this.handleMealFeeLink = this.handleMealFeeLink.bind(this);//餐费添加关联
    this.elderlyListFlagToTrue = this.elderlyListFlagToTrue.bind(this);//返回
    this.handleTabChange = this.handleTabChange.bind(this);//切换tab面板
  }

  componentDidMount(){
    this.getPayItemChild();
  }

  handleTabChange(key){
    // console.log('key===',key);
    this.setState({activeTabKey:key});
  }
  elderlyListFlagToTrue(){//返回
    this.props.elderlyListFlagToTrue();
  }
  handleSubmit = (e) => {
    e.preventDefault();
    this.props.form.validateFields((err, fieldsValue) => {
      if(!err){
        const {bedInfo} = fieldsValue;
        console.log('bedInfo===',bedInfo);
        const values = {
          ...fieldsValue,
          'birthday': fieldsValue['birthday'].format('YYYY-MM-DD HH:mm:ss'),
          'checkInDate':fieldsValue['checkInDate'].format('YYYY-MM-DD HH:mm:ss'),
          'customerId': this.props.customerId,
          'status':3,
          'roomName':bedInfo.roomName,
          'roomCode':bedInfo.roomUuid||bedInfo.roomCode,
          'bedNumber':bedInfo.bedCode||bedInfo.bedNumber,
        };
        const { id}= this.state.oldManInfoList;
        delete values.bedInfo;
        if(id){
          values.id = id;
          httpServer.updateElderlyInfo(values).then((res)=>{
            if(res.code === 200){
              const args = {
                message: '通信成功',
                description: res.msg,
                duration: 2,
              };
              notification.success(args);
            }else{
              const args = {
                message: '通信失败',
                description: res.msg,
                duration: 2,
              };
              notification.error(args);
            }
          }).catch((error)=>{
            console.log(error);
          });
        }else{
          httpServer.saveElderlyInfo(values).then((res)=>{
            if(res.code === 200){
              const args = {
                message: '通信成功',
                description: res.msg,
                duration: 2,
              };
              notification.success(args);
              const {id} = res.data;
              this.setState({elderlyId:id,tab2Flag:false,btnSubmitFlag:true,activeTabKey:'2'});
            }else{
              const args = {
                message: '通信失败',
                description: res.msg,
                duration: 2,
              };
              notification.error(args);
            }
          }).catch((error)=>{
            console.log(error);
          });
        }
      }
    })}

  //绑定水费、电费、餐费关联
  handleWaterFeeLink(){
    this.setState({waterFlag:true});
  }
  handleWaterSelect(value){
    this.setState({waterFlag:false});
  }
  handleKwhFeeLink(){
    this.setState({kwhFlag:true});
  }
  handleKwhSelect(value){
    this.setState({kwhFlag:false});
  }
  handleMealFeeLink(){
    this.setState({mealFlag:true});
  }
  handleMealSelect(value){
    this.setState({mealFlag:false});
  }


  //关联收费项目选取
  getPayItemChild(){
    const {customerId} = this.props;
    httpServer.selectPayItemChild({customerId}).then((res)=>{
      if (res.code === 200) {
        res.data?this.setState({chargeItemList:res.data}):this.setState({chargeItemList:[]});
      } else {
        if(res.message ==='Request failed with status code 500'){
            console.log(res.message);
         }else{
            const args = {
            message: '通信失败',
            description: res.msg,
            duration: 2,
          };
          notification.error(args);
         }
      }
    }).catch((error)=>{
      console.log(error);
    });
  }
  //自定义手机号校验
  handleConfirmPhoneNumber(rule, value, callback) {
    if(value && !(/^[1][3,4,5,7,8][0-9]{9}$/.test(value))) {
      callback('手机号码格式不正确');
    } else {
      callback();
    }
  }
  //自定义身份证号校验
  handleConfirmIdNumber(rule, value, callback){
    if(value && !/^\d{6}(18|19|20)?\d{2}(0[1-9]|1[012])(0[1-9]|[12]\d|3[01])\d{3}(\d|[xX])$/.test(value)){
      callback("身份证号格式错误");
    }else{
      callback();
    }
  }
  //自定义水费校验
  handleConfirmShareProportionWater(rule, value, callback){
    if(value && !/^(0|[1-9][0-9]?|100)$/.test(value)){
       callback("请输入0-100的正整数");
    }else{
      callback();
    }
  }
  //自定义电费校验
  handleConfirmShareProportionPower(rule, value, callback){
    if(value && !/^(0|[1-9][0-9]?|100)$/.test(value)){
       callback("请输入0-100的正整数");
    }else{
      callback();
    }
  }

  handleConfirmAge(rule, value, callback){
    if(value && !/^[1-9]\d*$/.test(value)){
       callback("请输入正整数");
    }else{
      callback();
    }
  }
  render(){
    const { getFieldDecorator } = this.props.form;
    const {chargeItemList,waterFlag,kwhFlag,mealFlag,modalFlag,optionsList,optionsListBed,editFlag,btnSubmitFlag} = this.state;
    const {
      name,    //老人姓名
      age,//年龄
      idNumber,//老人身份证号 需要正则判断
      socialSecurityNumber,//社保卡号
      phone,//联系电话
      sex,//老人性别 int
      birthday,//老人生日 datetime
      checkInDate,//入院日期
      maritalStatus,//老人婚姻状况 int
      address,//老人住址
      politicalFace,//老人政治面貌 int
      livingCondition,//老人居住状况 int
      economicSituation,//老人经济状况 int
      hobby,//爱好特长
      //opetator,//操作员
      roomName,//房间名称
      roomCode,//房间uuid
      bedNumber,//床位号
      estimateGradeCode,//评估等级
      nursingGradeCode,//护理等级
      itemCodeWater,//水费对应项
      itemCodeKwh,//电费对应项
      itemCodeMeal,//餐费对应项
      shareProportionWater,//水费承担比例
      shareProportionPower,//电费承担比例
      memo,//备注
      tbBedInfo,
      bedInfo,
    } = this.state.oldManInfoList;
    const formItemLayout = {
      labelCol: {
        xs: { span: 24 },
        sm: { span: 4 },

      },
      wrapperCol: {
        xs: { span: 24 },
        sm: { span: 20 },
      },
    };
    const tailFormItemLayout = {
      wrapperCol: {
        xs: {
          span: 24,
          offset: 0,
        },
        sm: {
          span: 16,
          offset: 8,
        },
      },
    };
    return(
      <Fragment>
        <div className="card-container">
          <Tabs type="card" tabBarExtraContent={<Button onClick={this.elderlyListFlagToTrue} type="primary">返回</Button>} activeKey={this.state.activeTabKey} onChange={this.handleTabChange}>
            <TabPane tab="老人信息" key="1" >
              <Form onSubmit={this.handleSubmit} hideRequiredMark className="formClass">
                <Form.Item
                  {...formItemLayout}
                  label="老人姓名"
                >
                  {getFieldDecorator('name', {
                    rules: [{required: true, message: '请输入老人姓名',}],
                    initialValue:name
                  })(
                    <Input disabled={editFlag}/>
                  )}
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="老人年龄"
                >
                  {getFieldDecorator('age', {
                    rules: [{required: true, message: '请输入老人年龄',},{
                       validator: this.handleConfirmAge
                    }],
                    initialValue:age
                  })(
                    <InputNumber min={1} disabled={editFlag}/>
                  )}
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="身份证号"
                >
                  {getFieldDecorator('idNumber', {
                    rules: [{required: true, message: '请输入老人身份证号',},{
                       validator: this.handleConfirmIdNumber
                    }],
                    initialValue:idNumber
                  })(
                    <Input disabled={editFlag}/>
                  )}
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="社保卡号"
                >
                  {getFieldDecorator('socialSecurityNumber', {
                    rules: [{required: true, message: '请输入社保卡号',}],
                    initialValue:socialSecurityNumber
                  })(
                    <Input disabled={editFlag}/>
                  )}
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="联系电话"
                >
                  {getFieldDecorator('phone', {
                    rules: [{required: true, message: '请输入联系电话',},{
                       validator: this.handleConfirmPhoneNumber
                    }],
                    initialValue:phone
                  })(
                    <Input disabled={editFlag}/>
                  )}
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="性别"
                >
                  {getFieldDecorator('sex', {
                    rules: [{required: true, message: '请选择老人性别',}],
                    initialValue:sex
                  })(
                    <Radio.Group  buttonStyle="solid" disabled={editFlag}>
                      <Radio.Button value={1}>男</Radio.Button>
                      <Radio.Button value={0}>女</Radio.Button>
                    </Radio.Group>
                  )}
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="出生日期"
                >
                  {getFieldDecorator('birthday', {
                    rules: [{required: true, message: '请选择出生日期',}],
                    initialValue:birthday?moment(birthday,'YYYY-MM-DD') : null
                  })(
                    <DatePicker format="YYYY-MM-DD" disabled={editFlag} />
                  )}
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="入院日期"
                >
                  {getFieldDecorator('checkInDate', {
                    rules: [{required: true, message: '请选择出生日期',}],
                    initialValue:checkInDate?moment(checkInDate,'YYYY-MM-DD HH:mm:ss') : null
                  })(
                    <DatePicker format="YYYY-MM-DD HH:mm:ss" disabled={editFlag} showTime/>
                  )}
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="婚姻状况"
                >
                  {getFieldDecorator('maritalStatus', {
                    rules: [{required: true, message: '请选择婚姻状况',}],
                    initialValue:maritalStatus
                  })(
                    <Radio.Group buttonStyle="solid" disabled={editFlag}>
                      <Radio.Button value={1}>未婚</Radio.Button>
                      <Radio.Button value={2}>已婚</Radio.Button>
                      <Radio.Button value={3}>丧偶</Radio.Button>
                      <Radio.Button value={4}>离异</Radio.Button>
                    </Radio.Group>
                  )}
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="家庭住址"
                >
                  {getFieldDecorator('address', {
                    rules: [{required: true, message: '请输入老人家庭住址',}],
                    initialValue:address
                  })(
                    <Input disabled={editFlag}/>
                  )}
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="政治面貌"
                >
                  {getFieldDecorator('politicalFace', {
                    rules: [{required: true, message: '请选择老人政治面貌',}],
                    initialValue:politicalFace
                  })(
                    <Radio.Group  buttonStyle="solid" disabled={editFlag}>
                      <Radio.Button value={1}>群众</Radio.Button>
                      <Radio.Button value={2}>党员</Radio.Button>
                      <Radio.Button value={3}>其他党派</Radio.Button>
                    </Radio.Group>
                  )}
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="居住状况"
                >
                  {getFieldDecorator('livingCondition', {
                    rules: [{required: true, message: '请选择老人居住状况',}],
                    initialValue:livingCondition
                  })(
                    <Radio.Group  buttonStyle="solid" disabled={editFlag}>
                      <Radio.Button value={1}>独居</Radio.Button>
                      <Radio.Button value={2}>与家庭成员同住</Radio.Button>
                      <Radio.Button value={3}>其他</Radio.Button>
                    </Radio.Group>
                  )}
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="经济状况"
                >
                  {getFieldDecorator('economicSituation', {
                    rules: [{required: true, message: '请选择老人经济状况',}],
                    initialValue:economicSituation
                  })(
                    <Radio.Group  buttonStyle="solid" disabled={editFlag}>
                      <Radio.Button value={1}>离休</Radio.Button>
                      <Radio.Button value={2}>退休金</Radio.Button>
                      <Radio.Button value={3}>子女供给</Radio.Button>
                      <Radio.Button value={4}>社会保险与救济</Radio.Button>
                      <Radio.Button value={5}>其他</Radio.Button>
                    </Radio.Group>
                  )}
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="爱好特长"
                >
                  {getFieldDecorator('hobby', {
                    rules: [{required: false, message: '请输入老人的爱好特长',}],
                    initialValue:hobby
                  })(
                    <Input disabled={editFlag}/>
                  )}
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="评估等级"
                >
                  {getFieldDecorator('estimateGradeCode', {
                    rules: [{required: true, message: '请选择评估等级',}],
                    initialValue:estimateGradeCode
                  })(  
                  <Select placeholder="请选择评估等级"  disabled={editFlag}>
                    {this.props.estimateGradeLists&&this.props.estimateGradeLists.map(item => <Option key={item.estimateGradeCode}>{item.estimateGradeName}</Option>)}
                  </Select>
                  )}
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="护理等级"
                >
                  {getFieldDecorator('nursingGradeCode', {
                    rules: [{required: true, message: '请选择护理等级',}],
                    initialValue:nursingGradeCode
                  })(  
                  <Select placeholder="请选择护理等级"  disabled={editFlag}>
                    {this.props.nursingGradeLists&&this.props.nursingGradeLists.map(item => <Option key={item.nursingGradeCode}>{item.nursingGradeName}</Option>)}
                  </Select>
                  )}
                </Form.Item>
                <Form.Item
                    label="床位选择"
                    {...formItemLayout}
                    style={{marginBottom:'4px'}}
                  >
                   {getFieldDecorator('bedInfo', {
                      rules: [{ required: true, message: '请选择床位!' }],
                      initialValue:bedInfo
                    })(
                      <BedInfo customerId={this.props.customerId} roomDisflag={this.state.roomDisflag}/>
                    )}
                  </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="水费对应项"
                >
                  {getFieldDecorator('itemCodeWater', {
                    rules: [{required: true, message: '请选择水费对应项',}],
                    initialValue:itemCodeWater
                  })(
                    <Select showArrow={false} open={waterFlag} disabled onSelect={(value)=>{this.handleWaterSelect(value)}}>
                      {chargeItemList.map(item => <Option key={item.itemCode}>{item.name}</Option>)}
                    </Select>

                  )}
                  <Button onClick={this.handleWaterFeeLink} disabled={editFlag}>添加关联</Button>
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="电费对应项"
                >
                  {getFieldDecorator('itemCodeKwh', {
                    rules: [{required: true, message: '请选择电费对应项',}],
                    initialValue:itemCodeKwh
                  })(
                     <Select showArrow={false} open={kwhFlag} disabled onSelect={(value)=>{this.handleKwhSelect(value)}}>
                      {chargeItemList.map(item => <Option key={item.itemCode}>{item.name}</Option>)}
                    </Select>
                  )}
                  <Button onClick={this.handleKwhFeeLink} disabled={editFlag}>添加关联</Button>
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="餐费对应项"
                >
                  {getFieldDecorator('itemCodeMeal', {
                    rules: [{required: true, message: '请选择餐费对应项',}],
                    initialValue:itemCodeMeal
                  })(
                    <Select showArrow={false} open={mealFlag} disabled onSelect={(value)=>{this.handleMealSelect(value)}}>
                      {chargeItemList.map(item => <Option key={item.itemCode}>{item.name}</Option>)}
                    </Select>
                  )}
                  <Button onClick={this.handleMealFeeLink} disabled={editFlag}>添加关联</Button>
                </Form.Item>
                 <Form.Item
                  {...formItemLayout}
                  label="水费承担比例(%)"
                >
                  {getFieldDecorator('shareProportionWater', {
                    rules: [{required: true, message: '请输入水费承担比例(0-100的正整数)',},{
                       validator: this.handleConfirmShareProportionWater
                    }],
                    initialValue:shareProportionWater
                  })(
                    <InputNumber min={0} max={100} disabled={editFlag}/>
                  )}
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="电费承担比例(%)"
                >
                  {getFieldDecorator('shareProportionPower', {
                    rules: [{required: true, message: '请输入电费承担比例(0-100的正整数)',},{
                       validator: this.handleConfirmShareProportionPower
                    }],
                    initialValue:shareProportionPower
                  })(
                    <InputNumber min={0} max={100} disabled={editFlag}/>
                  )}
                </Form.Item>
                <Form.Item
                  {...formItemLayout}
                  label="备注信息"
                >
                  {getFieldDecorator('memo', {
                    rules: [{required: false, message: '请输入备注',}],
                    initialValue:memo
                  })(
                    <TextArea disabled={editFlag}/>
                  )}
                </Form.Item>
                <Form.Item {...tailFormItemLayout}>
                  <Button type="primary" htmlType="submit" disabled={editFlag || btnSubmitFlag}>确认提交</Button>
                </Form.Item>
              </Form>
            </TabPane>
            <TabPane tab="家庭成员信息" key="2" disabled={this.state.tab2Flag}>
              <FamilyMember elderlyId={this.state.elderlyId} editFlag={editFlag}/>
            </TabPane>
          </Tabs>
        </div>
      </Fragment>
    )
  }
}

const OldManInfo =  Form.create()(OldManInfo1);
export default OldManInfo;
/*
<Form.Item
  {...formItemLayout}
  label="操作员"
>
    {getFieldDecorator('opetator', {
      rules: [{required: true, message: '请输入操作员',}],
      initialValue:opetator
    })(
      <Input disabled/>
    )}
</Form.Item>
 */