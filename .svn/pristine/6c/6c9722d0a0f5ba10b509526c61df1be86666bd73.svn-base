import React,{Fragment} from 'react';
import { Card, Input,Modal ,Button,Select, Form, Avatar, notification, Divider,Icon,Tag,DatePicker} from 'antd';
import httpServer from '@/axios';
import moment from 'moment';

const { Meta } = Card;
const Option = Select.Option;

class changeNursingGrade extends React.Component {
    
    notice(status, msg) {
        let text = status==='success' ? '成功' : (status === 'error'? '失败' : '');
        notification[status]({
            message: `${text}提示:`,
            description:msg,
            duration:2
        })
    }
    cancel=()=>{
    	this.props.close();
    }
    handleOk=()=>{
    	const elderly= this.props.elderlyInfo;
    	const {account,id} = this.props.auth;
    	this.props.form.validateFieldsAndScroll((err, fieldsValue) => {
    	  if(!err){
    	  	let values = {...fieldsValue,optName:account,optId:id,elderlyId:elderly.id};
    	  	httpServer.savechangeNursingGrade(values).then(res=>{
    	  		if(res.code===200){
    	  		   this.notice('success','护理等级变更');
    	  		}else{
    	  			this.notice('error','护理等级变更')
    	  		}
    	  		this.props.close();
    	  	})
    	  }
    	})
    }
    render() {
        
        const { getFieldDecorator } = this.props.form;
        const {elderlyInfo,deptFlag,grades} = this.props;
        
        return ( 
        	<Modal
		        title="护理等级变更"
		        okText='提交'
		        width="40%"
		        visible={true}
		        onOk={this.handleOk}
		        onCancel={this.cancel}
		        maskClosable={false}
		      >
                <Card title="基础信息">
				    <Meta
				        avatar={<Avatar src="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png" />}
				        title={elderlyInfo.name}
				        description={<span>性别:&emsp;<Tag color="#108ee9">{elderlyInfo.sex}</Tag>&emsp;年龄:&emsp;<Tag color="orange">{elderlyInfo.age}岁</Tag>&emsp;&emsp;联系人:&emsp;{elderlyInfo.age}</span>}
				    />
				</Card>
				<Divider orientation="left">变更记录</Divider>
				 <Form layout="vertical">
		            <Form.Item label="原护理等级">
		              {getFieldDecorator('oldNursingGradeCode', {
		                rules: [{required:true,  message: '请选择新的护理等级' }],
		                initialValue:elderlyInfo.nursingGradeCode
		              })(
		                 <Select placeholder='护理等级' disabled>
		                    {
		                    	grades.map(item=>(<Option key={item.nursingGradeCode}>{item.nursingGradeName+'_'+item.money+'元/月'}</Option>))
		                    }
                         </Select>
		              )}
		            </Form.Item>
		            <Form.Item label="变更后护理等级">
		              {getFieldDecorator('newNursingGradeCode',{
		              	rules: [{ required: true, message: '请选择新的护理等级' }],
		              })(
		              	<Select placeholder='护理等级'>
		              	   {
		                    	grades.map(item=>(<Option key={item.nursingGradeCode}>{item.nursingGradeName+'_'+item.money+'元/月'}</Option>))
		                    }
                         </Select> 
		              )}
		            </Form.Item>
		             {deptFlag==='2'?
			            <Fragment>
			              	<Form.Item label='护理部确认'>
			                {getFieldDecorator('nursingDept', {
			                  rules: [{ required: true, message: '请输出审核人'}],
			                })(
			                    <Input placeholder="审核人" />
			                )}
			              </Form.Item>
			              <Form.Item label='确认日期'>
			                {getFieldDecorator('optDate', {
			                  rules: [{ required: true, message: '请选择审核时间'}],
			                  initialValue:moment()
			                })(
			                   <DatePicker showTime format="YYYY-MM-DD"/>
			                )}
			              </Form.Item>
			            </Fragment>:null
		              }
		              {deptFlag==='3'?
			            <Fragment>
			                <Form.Item label='院方确认'>
			                {getFieldDecorator('officeDept', {
			                  rules: [{ required: true, message: '请输出审核人'}],
			                })(
			                    <Input placeholder="审核人" />
			                )}
			              </Form.Item>
			                <Form.Item label='确认日期'>
			                {getFieldDecorator('opt2Date', {
			                  rules: [{ required: true, message: '请选择审核时间'}],
			                  initialValue:moment()
			                })(
			                   <DatePicker showTime format="YYYY-MM-DD"/>
			                )}
			              </Form.Item>
			            </Fragment>:null
		              }
		          </Form> 
            </Modal>    
        )
    }
}
export default Form.create()(changeNursingGrade)