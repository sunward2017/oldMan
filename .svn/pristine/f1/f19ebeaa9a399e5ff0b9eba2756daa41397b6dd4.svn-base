import React , {Component,Fragment} from 'react';
import { Card ,Row, Col ,Tree, notification, Table, Popconfirm} from 'antd';
import BreadcrumbCustom from '../../BreadcrumbCustom';
import httpServer from '../../../axios/index';

const { TreeNode } = Tree;
class LeaveAuditSet extends Component{
  constructor(props){
    super(props);
    this.state = {
      treeData:[],
      dataSource:[],
    }
    this.onSelect = this.onSelect.bind(this);
  }

  componentDidMount(){
    this.getDeptInfoTree();
    this.getListLeaveAuditSet();
  }
  //获取部门列表数据
  getDeptInfoTree(){
    const {customerId} = this.props.auth;
    httpServer.getDeptInfoTree({customerId})
    .then((res) => {
      if (res.code === 200) {
        res.data?this.setState({treeData:[res.data]}):this.setState({treeData:[]});
      }else{
        if(res.message ==='Request failed with status code 500'){
          console.log(res.message);
        }else{
          const args = {
            message: '通信失败',
            description: res.msg,
            duration: 2,
          };
          notification.error(args);
        }
      }
    }).catch((error)=>{
      console.log(error);
    });
  }

  //获取审核部门列表
  getListLeaveAuditSet(){
    const {customerId} = this.props.auth;
    httpServer.listLeaveAuditSet({customerId})
    .then((res) => {
      if (res.code === 200) {
        res.data?this.setState({dataSource:res.data}):this.setState({dataSource:[]});
      }else{
        if(res.message ==='Request failed with status code 500'){
          console.log(res.message);
        }else{
          const args = {
            message: '通信失败',
            description: res.msg,
            duration: 2,
          };
          notification.error(args);
        }
      }
    }).catch((error)=>{
      console.log(error);
    });
  }

  //选中树节点
  onSelect(selectedKeys,info){
   if(!info.selected) return;//取消选中树节点就直接返回了
   if(info.selectedNodes[0].props.dataRef.id === 1){
    const args = {
      message: '友情提示',
      description: '根目录不能设置为审核部门',
      duration: 2,
    };
     notification.info(args);
     return false;
   }
   const {id,customerId} = this.props.auth;
   const optId = id;
   const deptId = info.selectedNodes[0].props.dataRef.departmentId;
   const deptName = info.selectedNodes[0].props.dataRef.departmentName;
   httpServer.saveLeaveAuditSet({customerId,optId,deptId,deptName})
   .then((res) => {
      if (res.code === 200) {
        const args = {
          message: '通信成功',
          description: res.msg,
          duration: 2,
        };
        notification.success(args);
        this.getListLeaveAuditSet();
      }else{
        if(res.message ==='Request failed with status code 500'){
          console.log(res.message);
        }else{
          const args = {
            message: '通信失败',
            description: res.msg,
            duration: 2,
          };
          notification.error(args);
        }
      }
    }).catch((error)=>{
      console.log(error);
    });
  }

  //树形节点渲染
  renderTreeNodes = data => data.map((item) => {
    if (item.children) {
      return (
        <TreeNode title={item.departmentName} key={item.id} dataRef={item}>
          {this.renderTreeNodes(item.children)}
        </TreeNode>
      );
    }
    return <TreeNode {...item} />;
  })

  //删除
  handleRowDelete(id){
    httpServer.deleteLeaveAuditSet({id},{headers: {'Content-Type': 'application/x-www-form-urlencoded'}}).then((res)=>{
       if (res.code === 200) {
          const args = {
            message: '通信成功',
            description: res.msg,
            duration: 2,
          };
          notification.success(args);
          this.getListLeaveAuditSet();
        } else {
          if(res.message ==='Request failed with status code 500'){
              console.log(res.message);
           }else{
               const args = {
              message: '通信失败',
              description: res.msg,
              duration: 2,
            };
            notification.error(args);
           }
        }
    }).catch((err)=>{
      console.log(err);
    });
  }
  render(){
    const {treeData,dataSource} = this.state;
    const columns = [{
      title: '序号',
      render:(text,record,index)=>`${index+1}`,
      key:'serialNumber',
      width:'25%'
    },{
      title: '部门名称',
      dataIndex: 'deptName',
      key: 'deptName',
      width:'25%'
    },{
      title:'添加日期',
      dataIndex: 'addtime',
      key: 'addtime',
      width:'25%'
    },{
      title:'操作',
      dataIndex:'action',
      key:'action',
      render:(text,record)=>{
        return(
          <span>
              <Popconfirm title="确定删除?" onConfirm={() => this.handleRowDelete(record.id)}>
                <a href="javascript:;" style={{color:'#2ebc2e'}}>删除</a>
              </Popconfirm>
          </span>
        )
      },
    }];
    return(
      <Fragment>
        <BreadcrumbCustom first="基础信息" second="出院审核部门设置" />
        <Row gutter={16}>
          <Col md={4}>
            <Card title="出院审核部门树形列表" bordered={false} style={{ width:"100%"}}>
               <Tree
                defaultExpandAll={true}
                onSelect={this.onSelect}
              >
                {this.renderTreeNodes(treeData)}
              </Tree>
            </Card>
          </Col>
          <Col md={20}>
            <Card title="审核部门列表" bordered={false} style={{ width:"100%"}}>
              <Table 
                bordered
                dataSource={dataSource} 
                columns={columns} 
                pagination={{ showSizeChanger:true , showQuickJumper:true , pageSizeOptions:['10','20','30','40','50','100']}}
                rowKey={record => record.id}
              />
            </Card>
            
          </Col>
        </Row>
      </Fragment>
    )
  }
}

export default LeaveAuditSet;