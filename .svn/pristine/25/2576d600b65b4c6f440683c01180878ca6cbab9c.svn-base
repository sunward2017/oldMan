import React , {Component,Fragment} from 'react';
import {Form,Button,Input,Radio ,Select,notification} from 'antd';
import httpServer from '../../../axios';

const Option = Select.Option
class MineForm extends Component{
  constructor(props){
    super(props);
    this.state = {
      dataList:props.record,
      itemNameList:[],
    }
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleSubmit(){
    this.props.changeTabskeyToTab1();
    console.log(this.state.dataList);
  }

  getItemNameList(){
    const {itemType} = this.state.dataList;
    httpServer.listParam({type:itemType},{headers: {'Content-Type': 'application/x-www-form-urlencoded'}}).then((res)=>{
      if (res.code === 200) {
        res.data?this.setState({itemNameList:res.data}):this.setState({itemNameList:[]});
      } else {
        const args = {
          message: '通信失败',
          description: res.msg,
          duration: 2,
        };
        notification.error(args);
      }
    }).catch((err)=>{
      console.log(err);
    });
  }

  handleIptText(target,e) {
    let dataList = Object.assign({},this.state.dataList);
    dataList[target] = e.target ? e.target.value : e;
    this.setState({dataList},()=>{
      if(target==='itemType'){
        delete dataList.itemName;
        this.setState({dataList},()=>{
          this.getItemNameList();
        });
      }
    });
    
  }
  render(){
    const {itemTypeList} = this.props;
    const {itemNameList} = this.state;
    const {
      nursingGradeCode,//护理等级代码
      nursingGradeName,//护理等级名称
      itemName,        //项目名称
      discription,     //描述
      timeLenght,      //时长
      itemType,        //项目类别
      repeatType,      //重复类型
      repeatDate,      //重复时间
      pointTime,       //时间点
      templete,        //模版
      memo,            //备注
      operaterName,    //操作员
      status,          //状态
    } = this.state.dataList;
    const formItemLayout = {
      labelCol: {
        xs: { span: 24 },
        sm: { span: 5 },
      },
      wrapperCol: {
        xs: { span: 24 },
        sm: { span: 19 },
      },
    };
    return(
      <Fragment>
        <h3 style={{textAlign:'center',fontSize:'18px',fontWeight:'bold'}}>基本信息</h3>
        <Form hideRequiredMark onSubmit={this.handleSubmit}>
          <Form.Item
            label='操作员'
            style={{marginBottom:'4px'}}
            {...formItemLayout}
          >
            <Input value={operaterName} onChange={(e) => this.handleIptText('operaterName',e)} disabled />
          </Form.Item>
          <Form.Item
            label='护理等级编号'
            style={{marginBottom:'4px'}}
            {...formItemLayout}
          >
            <Input value={nursingGradeCode} onChange={(e) => this.handleIptText('nursingGradeCode',e)} disabled />
          </Form.Item>
          <Form.Item
            label='护理等级名称'
            style={{marginBottom:'4px'}}
            {...formItemLayout}
          >
            <Input  value={nursingGradeName} onChange={(e) => this.handleIptText('nursingGradeName',e)} disabled />
          </Form.Item>
          <Form.Item
            label='项目类别'
            style={{marginBottom:'4px'}}
            {...formItemLayout}
          >
            <Select
              value={itemType}
              onChange={(e) => this.handleIptText('itemType',e)}
            >
              {itemTypeList.map(item => <Option key={item.type}>{item.name}</Option>)}
            </Select>
          </Form.Item>
          <Form.Item
            label='项目名称'
            style={{marginBottom:'4px'}}
            {...formItemLayout}
          >
            <Select
              value={itemName}
              onChange={(e) => this.handleIptText('itemName',e)}
            >
              {itemNameList.map(item => <Option key={item.value}>{item.value}</Option>)}
            </Select>
          </Form.Item>
          <Form.Item
            label='项目描述'
            style={{marginBottom:'4px'}}
            {...formItemLayout}
          >
            <Input  value={discription} onChange={(e) => this.handleIptText('discription',e)} />
          </Form.Item>
          <Form.Item
            label='时长'
            style={{marginBottom:'4px'}}
            {...formItemLayout}
          >
            <Input  value={timeLenght} onChange={(e) => this.handleIptText('timeLenght',e)} />
          </Form.Item>
          <Form.Item
            label='重复类型'
            style={{marginBottom:'4px'}}
            {...formItemLayout}
          >
            <Radio.Group 
              value={repeatType} 
              onChange={(e) => this.handleIptText('repeatType',e)} 
              buttonStyle="solid"
            >
              <Radio.Button value="0">按需</Radio.Button>
              <Radio.Button value="1">每日</Radio.Button>
              <Radio.Button value="2">每周</Radio.Button>
              <Radio.Button value="3">每月</Radio.Button>
            </Radio.Group>
          </Form.Item>
          <Form.Item
            label='重复时间'
            style={{marginBottom:'4px'}}
            {...formItemLayout}
          >
            <Input placeholder='必填项' value={repeatDate} onChange={(e) => this.handleIptText('repeatDate',e)} />
          </Form.Item>
          <Form.Item
            label='时间点'
            style={{marginBottom:'4px'}}
            {...formItemLayout}
          >
            <Input placeholder='必填项' value={pointTime} onChange={(e) => this.handleIptText('pointTime',e)} />
          </Form.Item>
          <Form.Item
            label='模板'
            style={{marginBottom:'4px'}}
            {...formItemLayout}
          >
            <Input placeholder='必填项' value={templete} onChange={(e) => this.handleIptText('templete',e)} />
          </Form.Item>
          <Form.Item
            label='备注'
            style={{marginBottom:'4px'}}
            {...formItemLayout}
          >
            <Input placeholder='必填项' value={memo} onChange={(e) => this.handleIptText('memo',e)} />
          </Form.Item>
          <Form.Item
            label='状态'
            style={{marginBottom:'4px'}}
            {...formItemLayout}
          >
            <Input placeholder='必填项' value={status} onChange={(e) => this.handleIptText('status',e)} />
          </Form.Item>
          <Form.Item>
            <Button type="primary" htmlType="submit">确认</Button>
          </Form.Item>
        </Form>
      </Fragment>
    )
  }
}

export default MineForm;