import React , {Component,Fragment} from 'react';
import {Button,Table,Divider,Popconfirm,Modal,Form,Input,Select,notification} from 'antd';
import BreadcrumbCustom from '../../BreadcrumbCustom';
import httpServer from '../../../axios';

const Option = Select.Option;
class ReductionMonth extends Component{
  constructor(props){
    super(props);
    this.state = {
      dataSource:[],
      modalFlag:false,
      data:{},
      action:'',
      flag:false,
    }
    this.handleAdd = this.handleAdd.bind(this);
    this.handleCancel = this.handleCancel.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }
  componentDidMount(){
    this.getDiscountMonthList();
  }

  getDiscountMonthList(){
    const {customerId} = JSON.parse(localStorage.getItem('auth'));
    httpServer.listDiscountMonth({customerId}).then((res)=>{
      if (res.code === 200) {
        res.data?this.setState({dataSource:res.data}):this.setState({dataSource:[]});
      } else {
        if(res.message ==='Request failed with status code 500'){
          console.log(res.message);
        }else{
          const args = {
            message: '通信失败',
            description: res.msg,
            duration: 2,
          };
        notification.error(args);
       }
      }
    }).catch((error)=>{
      console.log(error);
    });
  }

  //Form表单发生变化
  handleIptText(target,e) {
    let data = Object.assign({},this.state.data);
    data[target] = e.target ? e.target.value : e;
    this.setState({data});
  }

  //关闭modal
  handleCancel(){
    this.setState({modalFlag:false});
  }

  //添加
  handleAdd(){
    this.setState({modalFlag:true,action:'',data:{},flag:false,});
  }

  //修改
  handleModify(record){
    this.setState({modalFlag:true,action:'',data:record,flag:false,});
  }

  //查看
  handleRead(record){
    this.setState({modalFlag:true,action:'read',data:record,flag:true,});
  }

  //删除
  handleRowDelete(id){
    httpServer.deleteDiscountMonth({id},{headers: {'Content-Type': 'application/x-www-form-urlencoded'}}).then((res)=>{
           if (res.code === 200) {
              const args = {
                message: '通信成功',
                description: res.msg,
                duration: 2,
              };
              notification.success(args);
              this.getDiscountMonthList();
            } else {
              if(res.message ==='Request failed with status code 500'){
                  console.log(res.message);
               }else{
                   const args = {
                  message: '通信失败',
                  description: res.msg,
                  duration: 2,
                };
                notification.error(args);
               }
            }
        }).catch((err)=>{
          console.log(err);
        });
  }

  //提交表单
  handleSubmit(){
    const {action} = this.state;
    const {month,year} = this.state.data;
    const {customerId} = JSON.parse(localStorage.getItem('auth'));
    const data = this.state.data;
    if(action !== 'read'){
      if(!(month && year)){
        notification.warning({
            message: '提示：',
            description: '单据存在数据未填的情况，请仔细核对！',
          });
        return false
      }
      data.year = year;
      data.month = month;
      data.customerId = customerId;
      if(data.id){
        httpServer.updateDiscountMonth(data,{headers: {'Content-Type': 'application/x-www-form-urlencoded'}}).then((res)=>{
           if (res.code === 200) {
              const args = {
                message: '通信成功',
                description: res.msg,
                duration: 2,
              };
              notification.success(args);
              this.getDiscountMonthList();
              this.handleCancel();
            } else {
              if(res.message ==='Request failed with status code 500'){
                  console.log(res.message);
               }else{
                   const args = {
                  message: '通信失败',
                  description: res.msg,
                  duration: 2,
                };
                notification.error(args);
               }
            }
        }).catch((err)=>{
          console.log(err);
        });
      }else{
        httpServer.saveDiscountMonth(data,{headers: {'Content-Type': 'application/x-www-form-urlencoded'}}).then((res)=>{
           if (res.code === 200) {
              const args = {
                message: '通信成功',
                description: res.msg,
                duration: 2,
              };
              notification.success(args);
              this.getDiscountMonthList();
              this.handleCancel();
            } else {
              if(res.message ==='Request failed with status code 500'){
                  console.log(res.message);
               }else{
                   const args = {
                  message: '通信失败',
                  description: res.msg,
                  duration: 2,
                };
                notification.error(args);
               }
            }
        }).catch((err)=>{
          console.log(err);
        });
      }  
    }else{
      this.handleCancel();
    }

  }

  render(){
    const {dataSource,modalFlag,flag} = this.state;
    const { year, month } = this.state.data;
    const months = [{value:1},{value:2},{value:3},{value:4},{value:5},{value:6},{value:7},{value:8},{value:9},{value:10},{value:11},{value:12}];
    const formItemLayout = {
      labelCol: {
        xs: { span: 24 },
        sm: { span: 5 },
      },
      wrapperCol: {
        xs: { span: 24 },
        sm: { span: 19 },
      },
    };
    const tailFormItemLayout = {
      wrapperCol: {
        xs: {
          span: 24,
          offset: 0,
        },
        sm: {
          span: 16,
          offset: 8,
        },
      },
    };
    const columns = [{
      title: '序号',
      render:(text,record,index)=>`${index+1}`,
      key:'serialNumber',
      width:'10%'
    },{
      title: '年份',
      dataIndex: 'year',
      key: 'year',
      width:'10%'
    },{
      title:'月份',
      dataIndex: 'month',
      key: 'month',
      width:'10%'
    },{
      title:'添加日期',
      dataIndex: 'addtime',
      key: 'addtime',
      width:'20%'
    },{
      title:'操作',
      dataIndex:'action',
      key:'action',
      render:(text,record)=>{
        return(
          <span>
            <a href="javascript:;" onClick={() => { this.handleRead(record) }} style={{color:'#2ebc2e'}}>查看</a>
            <Divider type="vertical" />
            <a href="javascript:;" onClick={() => { this.handleModify(record) }} style={{color:'#2ebc2e'}}>修改</a>
              <Divider type="vertical" />
              <Popconfirm title="确定删除?" onConfirm={() => this.handleRowDelete(record.id)}>
                <a href="javascript:;" style={{color:'#2ebc2e'}}>删除</a>
              </Popconfirm>
          </span>
        )
      },
    }];
    return(
      <Fragment>
        <BreadcrumbCustom first="基础信息" second="水费减免月" />
        <Button onClick={this.handleAdd} style={{marginBottom:'20px'}}>新增</Button>
        <Table 
          bordered
          dataSource={dataSource} 
          columns={columns} 
          pagination={{ showSizeChanger:true , showQuickJumper:true , pageSizeOptions:['10','20','30','40','50','100']}}
          rowKey={record => record.id}
        />
        {
          modalFlag?<Modal
                      title="水费减免月信息"
                      visible={true}
                      onCancel={this.handleCancel}
                      maskClosable = {false}//点击遮罩层不允许关闭
                      footer = {null}
                    >
                      <Form hideRequiredMark onSubmit={this.handleSubmit}>
                        <Form.Item
                          label='年份'
                          {...formItemLayout}
                          style={{marginBottom:'4px'}}
                        >
                          <Input value={year} placeholder='必填项'  onChange={(e) => this.handleIptText('year',e)} disabled={flag}/>
                        </Form.Item>
                        <Form.Item
                          label='月份'
                          {...formItemLayout}
                          style={{marginBottom:'4px'}}
                        >
                          <Select onChange={(e) => this.handleIptText('month',e)} value={month} disabled={flag} >
                            {
                              months.map((item)=>{
                                return <Option key={item.value} >{item.value}</Option>
                              })
                            }
                          </Select>
                        </Form.Item>
                        <Form.Item {...tailFormItemLayout}>
                          <Button type="primary" htmlType="submit">确认</Button>
                        </Form.Item>
                      </Form>
                    </Modal>:null 
        }
      </Fragment>
    )
  }
}

export default ReductionMonth;