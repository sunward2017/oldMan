import React, { Component , Fragment } from 'react';
import BreadcrumbCustom from '../../BreadcrumbCustom';
import httpServer from '../../../axios';
import {Row,Col,Card,Button,Tree,Icon,notification,Table,Tag,Divider,Popconfirm} from 'antd';
import MineForm from './Form';

const { TreeNode } = Tree;
const itemTypeList =[{name:'单位',type:'1'},{name:'支付方式',type:'2'}];
const tabList = [{
  key: 'tab1',
  tab: 'tab1',
}, {
  key: 'tab2',
  tab: 'tab2',
}];


class WorkProjects extends Component{
  constructor(props){
    super(props);
    this.state={
      nursingGradeLists:[],
      selectedKeys:'',
      tabKey:'tab1',
      dataSource:[],
      nursingGradeCode:'',
      nursingGradeName:'',
      record:{},
      operaterName:'',//操作员
      customerId:'',
      action:'',
      edit:false,
      statusFlag:false,//表单status字段拼接备用
    }
    this.handleOnSelect = this.handleOnSelect.bind(this);
    this.handleClickAdd = this.handleClickAdd.bind(this);
    this.changeTabskey = this.changeTabskey.bind(this);
    this.getNursingGradeWorks = this.getNursingGradeWorks.bind(this);
  }

  componentDidMount(){
    this.getNursingGrade();//获取护理等级
  }
  //获取护理等级
  getNursingGrade(){
    const {customerId} = JSON.parse(localStorage.getItem('auth'));
    httpServer.listNursingGrade({customerId}).then((res)=>{
       if (res.code === 200) {
        console.log(res.data);
          res.data?this.setState({nursingGradeLists:res.data}):this.setState({nursingGradeLists:[]});
        } else {
          if(res.message ==='Request failed with status code 500'){
              console.log(res.message);
           }else{
               const args = {
              message: '通信失败',
              description: res.msg,
              duration: 2,
            };
            notification.error(args);
           }
        }
    }).catch((err)=>{
      console.log(err);
    });
  }

  //获取护理等级对应的护理项目列表
  getNursingGradeWorks(){
    const {customerId,nursingGradeCode,nursingGradeName} = this.state;
    httpServer.listWorkeItemSet({customerId,nursingGradeName,nursingGradeCode}).then((res)=>{
       if (res.code === 200) {
          res.data?this.setState({dataSource:res.data}):this.setState({dataSource:[]});
        } else {
          if(res.message ==='Request failed with status code 500'){
              console.log(res.message);
           }else{
               const args = {
              message: '通信失败',
              description: res.msg,
              duration: 2,
            };
            notification.error(args);
           }
        }
    }).catch((err)=>{
      console.log(err);
    });
  }

  //点击树节点时出发
  handleOnSelect(selectedKeys,params){
    if(!params.selected) return;
    const {account,customerId} = JSON.parse(localStorage.getItem('auth'));
    const {nursingGradeCode,nursingGradeName} = params.selectedNodes[0].props.dataRef;
    this.setState({selectedKeys,nursingGradeCode,nursingGradeName,tabKey:'tab1',customerId,operaterName:account},()=>{
          this.getNursingGradeWorks();
    });
  }

  onTabChange = (tabKey, type) => {
    this.setState({ tabKey});
  }

  changeTabskey(){
    this.setState({tabKey:'tab1'});
  }

  //添加
  handleClickAdd(){
    const {selectedKeys,nursingGradeName,nursingGradeCode,operaterName} = this.state;
    if(selectedKeys.length === 0){
      const args = {
        message: '友情提示',
        description: '请先使用鼠标左键单击选择护理等级',
        duration: 2,
      };
      notification.info(args);
      return false;
    }
    this.setState({ tabKey:'tab2',record:{nursingGradeName,nursingGradeCode,operaterName},action:'',edit:false,});
  }

  //修改
  handleModify(record){
    const itemType = record.itemType&&record.itemType.toString();
    const repeatType =record.repeatType&&record.repeatType.toString();
    const record1 = Object.assign({},record,{itemType,repeatType});
    this.setState({ tabKey:'tab2',record:record1,action:'',edit:false,});
  }

  handleRead(record){
    const itemType = record.itemType&&record.itemType.toString();
    const repeatType =record.repeatType&&record.repeatType.toString();
    const record1 = Object.assign({},record,{itemType,repeatType});
    this.setState({ tabKey:'tab2',record:record1,action:'read',edit:true,});
  }

  //删除
  handleRowDelete(id){
    httpServer.deleteWorkeItemSet({id},{headers: {'Content-Type': 'application/x-www-form-urlencoded'}}).then(res => {
      if (res.code === 200) {
        const args = {
          message: '通信成功',
          description: res.msg,
          duration: 2,
        };
        notification.success(args);
        this.getNursingGradeWorks();
      } else {
        console.log(res.message);
      }
    }).catch(
      err => { console.log(err) }
    )
  }
  render(){
    const {nursingGradeLists,dataSource,record,customerId,edit,action,statusFlag} = this.state;
    const columns = [{
      title: '序号',
      render:(text,record,index)=>`${index+1}`,
      key:'serialNumber',
      width:'5%'
    },{
      title:'等级名称',
      dataIndex: 'nursingGradeName',
      key: 'nursingGradeName',
      width:'10%'
    },{
      title:'项目名称',
      dataIndex: 'itemName',
      key: 'itemName',
      width:'10%'
    },{
      title:'重复类型',
      dataIndex: 'repeatType',
      key: 'repeatType',
      render:(text,record)=>{
        if(record.repeatType === 1){
          return <span>按需</span>
        }
        if(record.repeatType === 2){
          return <span>每日</span>
        }
        if(record.repeatType === 3){
          return <span>每周</span>
        }
        if(record.repeatType === 4){
          return <span>每月</span>
        }
      },
      width:'10%'
    },{
      title:'重复时间',
      dataIndex: 'repeatDate',
      key: 'repeatDate',
      width:'10%'
    },{
      title:'时间点',
      dataIndex: 'pointTime',
      key: 'pointTime',
      width:'10%'
    },{
      title:'时长',
      dataIndex: 'timeLenght',
      key: 'timeLenght',
      width:'10%'
    },{
      title: '添加日期',
      dataIndex: 'addtime',
      key: 'addtime',
      width:'12%'
    },{
      title: '操作员',
      dataIndex: 'operaterName',
      key: 'operaterName',
      width:'8%'
    },{
      title:'操作',
      dataIndex:'action',
      key:'action',
      render:(text,record)=>{
        return(
          <span>
            <a href="javascript:;" onClick={() => { this.handleRead(record) }} style={{color:'#2ebc2e'}}>查看</a>
            <Divider type="vertical" />
            <a href="javascript:;" onClick={() => { this.handleModify(record) }} style={{color:'#2ebc2e'}}>修改</a>
              <Divider type="vertical" />
              <Popconfirm title="确定删除?" onConfirm={() => this.handleRowDelete(record.id)}>
                <a href="javascript:;" style={{color:'#2ebc2e'}}>删除</a>
              </Popconfirm>
          </span>
        )
      },
    }]; 
    const contentList = {
      tab1: <Table dataSource={dataSource} columns={columns} rowKey={record => record.id} />,
      tab2: <MineForm 
              changeTabskeyToTab1={this.changeTabskey} 
              itemTypeList={itemTypeList}
              record={record}
              getNursingGradeWorks = {this.getNursingGradeWorks}
              customerId={customerId}
              edit={edit}
              action={action}
              statusFlag = {statusFlag}
              />,
    };
    return(
      <Fragment>
        <BreadcrumbCustom first="基础信息" second="工作项目" />
        <Row >
          <Col md={4} style={{background:'#fff'}}>
            <Card 
              title="护理级别" 
              bordered={false} 
              style={{ width: '100%' }}
              extra={<div style={{height:'32px'}}></div>}
            >
              <Tree
                showIcon
                defaultExpandAll
                onSelect={this.handleOnSelect}
              >
                <TreeNode 
                  icon={<Icon type="smile-o" style={{color:'green'}}/>} 
                  title="护理等级" 
                  key="0-0"
                  selectable={false}
                >
                  {
                    nursingGradeLists && nursingGradeLists.map((item,index)=>{
                      return <TreeNode
                              icon={<Icon type="smile-o" style={{color:'green'}}/>} 
                              title={item.nursingGradeName}
                              key={item.id}
                              dataRef={item}
                            />
                    })
                  }
                </TreeNode>
              </Tree>
            </Card>
          </Col>
          <Col md={20} style={{padding:'0 0 0 20px'}}>
            <Card 
              title="护理项目" 
              bordered={false} 
              style={{ width: '100%' }}
              extra={<Button type="primary" onClick={this.handleClickAdd} >新增</Button>}
              // tabList={tabList}
              activeTabKey={this.state.tabKey}
              onTabChange={(tabKey) => { this.onTabChange(tabKey, 'tabKey'); }}
            >
              {contentList[this.state.tabKey]}
            </Card>
          </Col>
        </Row>
      </Fragment>
    )
  }
}

export default WorkProjects;