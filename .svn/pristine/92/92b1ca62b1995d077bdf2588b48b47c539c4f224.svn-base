import React, {
	Component,
} from 'react';
import { Table, Tag, Divider, Popconfirm, Button, Modal, Form, Input, DatePicker, Radio, Select,notification,Row,Col, Icon,InputNumber } from 'antd';
import BreadcrumbCustom from '@/components/BreadcrumbCustom';
import moment from 'moment';
import httpServer from '@/axios';
import Area from '../area'

 
const RadioGroup = Radio.Group;
class roomConfig extends Component {
	constructor(props) {
		super(props);
		this.state = {
			dataSource: [],
			modalFlag: false,
			record: '',
			customerId: '',
			customers: [],
			areaId:'',
		}
	}

	componentDidMount() {
		//this.CustomerList()
		//this.List()
	}
	componentWillUnmount(){
		this.setState = (state,callback)=>{
          return;
       }
	}
//	CustomerList() {
//		let _this = this;
//		httpServer.listCustomerInfo().then(res => {
//			if(res.data && res.data.length > 0) {
//				let customers = res.data.map(i => ({
//					cId: i.customerId,
//					cName: i.customerName
//				}))
//				this.setState({
//					customers,
//					customerId: customers[0].cId
//				})
//			}
//		})
//	}
	List() {
		const areaId  = this.state.areaId;
		httpServer.listRoomInfo({areaId}).then(res => {
			if(res.data) {
				this.setState({
					dataSource: res.data
				})
			}else{
				this.setState({
					dataSource: []
				})
			}
		})
	}
//	handleChange = (v) => {
//		let _this = this;
//		this.setState({
//			customerId: v
//		})
//	}

	/*修改操作*/
	handleModify(record) {
		this.setState({
			modalFlag: true,
			record
		});
	}
	/*删除操作*/
	handleRowDelete(id, record) {
        const _this = this;
	    httpServer.deleteRoomInfo
	    
	    
	    ({id}).then(res => {
	      if (res.code === 200) {
	        const args = {
	          message: '通信成功',
	          description: res.msg,
	          duration: 2,
	        };
	        notification.success(args);
	        _this.List();
	      } else {
	        console.log(res.message);
	      }
	      this.setState({modalFlag:false,record:''});
	    }).catch(
	      err => { console.log(err) }
	    )
	}
	/*添加按钮*/
	handleAdd() {
		if(!this.state.areaId){
		   const args = {
			      message: '提示',
				  description:'你没有选择区域或不是节点目录',
				  duration: 2,
				};
		        notification.info(args);				
		}else{
			this.setState({
				modalFlag: true,
				record: ''
			});
		}
		
	}

	/*关闭弹框*/
	handleCancel() {
		this.setState({
			modalFlag: false,
			record: ''
		});
	}
	/*提交完成添加客户信息*/
	handleSubmit = (e) => {
		e.preventDefault();
		let _this = this;
		this.props.form.validateFieldsAndScroll((err, fieldsValue) => {
			
			if(!err) {
				const values = {
					...fieldsValue,
					'areaId':this.state.areaId,
					'customerId': this.state.customerId
				};
			  const { id }= this.state.record;
			  
              if(id){
              	    values.id = id;
					httpServer.updateRoomInfo(values).then((res)=>{
			   	    	console.log(res);
			   	    	const args = {
							message: '通信成功',
							description: res.msg,
							duration: 2,
						};
						notification.success(args);
						this.setState({
							modalFlag: false,
							record: ''
						});
						_this.List()
			   	    })
			   }else{
			   	   httpServer.saveRoomInfo(values).then((res) => {
						const args = {
							message: '通信成功',
							description: res.msg,
							duration: 2,
						};
						notification.success(args);
						this.setState({
							modalFlag: false,
							record: ''
						});
						_this.List()
					})
			   	    
			   }

			}
		});
	}
    
	onClick=(id)=>{
		this.setState({areaId:id},()=>{
			this.List()
		})
	}

	render() {
		const {
			getFieldDecorator
		} = this.props.form;
		const {
			dataSource,
			modalFlag,
			customers,
			customerId
		} = this.state;
		const {
			areaId,
			roomCode,
			roomName,
			bedNumber,
			status,
			 
		} = this.state.record;
		const formItemLayout = {
			labelCol: {
				xs: {
					span: 24
				},
				sm: {
					span: 4
				},
			},
			wrapperCol: {
				xs: {
					span: 24
				},
				sm: {
					span: 20
				},
			},
		};

		const tailFormItemLayout = {
			wrapperCol: {
				xs: {
					span: 24,
					offset: 0,
				},
				sm: {
					span: 16,
					offset: 8,
				},
			},
		};

		const columns = [{
			title: '序号',
			render: (text, record, index) => `${index+1}`,
			width: '5%',
			key:'index'
		},  {
			title: '房间号',
			dataIndex: 'roomCode',
			key: 'roomCode',
			width: '5%'
		}, {
			title: '房间名称',
			dataIndex: 'roomName',
			key: 'roomName',
			width: '10%'
		}, {
			title:'房间床位数',
			dataIndex:'bedNumber',
			key:'bedNumber',
			width:'10%'
		}, {
			title: '状态',
			dataIndex: 'status',
			key: 'status',
			render: (text, record) => {
				return record.status === 1 ? < Tag color = "green" > 正常 < /Tag>:<Tag color="red">注销</Tag >
			},
			width: '5%'
		}, {
			title: '操作',
			dataIndex: 'action',
			key: 'action',
			width: '8%',
			render: (text, record) => {
				return(
					<span>
			            <a href="javascript:;" onClick={() => { this.handleModify(record) }} style={{color:'#2ebc2e'}}>修改</a>
			              <Divider type="vertical" />
			              <Popconfirm title="确定删除?" onConfirm={() => this.handleRowDelete(record.id,record)}>
			                <a href="javascript:;" style={{color:'#2ebc2e'}}>删除</a>
			               </Popconfirm>
			        </span>
				)
			},
		}];
		return(
			<div>
		        <BreadcrumbCustom first="基础信息" second='房间管理' />
		        {/*<Select
			        placeholder="请选择机构"
			        value={customerId}
			        onChange={this.handleChange}
			        style={{ width: 200 }}
			      >
			        {customers.map(item => (
			          <Select.Option key={item.cId} value={item.cId}>
			            {item.cName}
			          </Select.Option>
			        ))}
			    </Select>*/}
	    	    <Divider type="vetical"/>
        		<Button type='primary' onClick={()=>{this.handleAdd()}}>添加</Button>
        		<Button type='primary' onClick={()=>{this.handleAdd()}}>批量添加</Button>
        		<Divider/>
        		<Row>
           			<Col span={4}>
                     <Area customer={customerId} onClick={this.onClick}/> 
					</Col>
		           <Col span={20} style={{padding:'0 0 0 20px'}}>
		                <Table 
				            bordered
				            rowKey='id' 
				            dataSource={dataSource} 
				            columns={columns} 
				            pagination={{ showSizeChanger:true ,showQuickJumper:true,pageSizeOptions:['10','20','30','40','50','100','200']}}
				          />
		           </Col>
                </Row>
          
       
		        {
		          modalFlag?
		          <Modal 
		            title="操作员信息输入"
		            // width='60%'
		            okText='提交'
		            visible={modalFlag}
		           
		            onCancel={()=>{this.handleCancel()}}
		            maskClosable={false}
		            footer={null}
		          >
		            <Form hideRequiredMark onSubmit={this.handleSubmit}>
		              <Form.Item
		                label='房间号'
		                {...formItemLayout}
		                style={{marginBottom:'4px'}}
		              >
		                {getFieldDecorator('roomCode', {
		                  rules: [{ required: true, message: '请输入工号!' }],
		                  initialValue:roomCode
		                })(
		                  <Input/>
		                )}
		              </Form.Item>
		              <Form.Item
		                label='房间名称'
		                {...formItemLayout}
		                style={{marginBottom:'4px'}}
		              >
		                {getFieldDecorator('roomName', {
		                  rules: [{ required: false, message: '请输入地址信息!' }],
		                  initialValue:roomName,
		                })(
		                  <Input />
		                )}
		              </Form.Item>
		              <Form.Item
		                label='床位数'
		                {...formItemLayout}
		                style={{marginBottom:'4px'}}
		              >
		                {getFieldDecorator('bedNumber', {
		                  rules: [{ required: false, message: '请输入地址信息!' }],
		                  initialValue:bedNumber,
		                })(
		                  <InputNumber />
		                )}
		              </Form.Item>
		              <Form.Item
		                label='状态'
		                {...formItemLayout}
		                style={{marginBottom:'4px'}}
		              >
		                {getFieldDecorator('status', {
		                  rules: [{ required: true, message: '请选择状态!' }],
		                  initialValue:status,
		                })(
		                  <RadioGroup>
		                    <Radio value={1}>正常</Radio>
		                    <Radio value={0}>注销</Radio>
		                  </RadioGroup>
		                )}
		              </Form.Item>
		              <Form.Item {...tailFormItemLayout}>
		                <Button type="primary" htmlType="submit">确认提交</Button>
		              </Form.Item>
		            </Form>
		          </Modal>:null
		        }
            </div>
		)
	}
}
const Room = Form.create()(roomConfig);
export default Room;